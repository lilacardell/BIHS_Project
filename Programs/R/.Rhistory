#pivot_longer mid(r01g & r01h) & type of items(r01n & r01o) columns without deleting the row where mid is NA
#code "2" and "NA" to 0
selected_r01r03$r01g = ifelse((selected_r01r03$r01g == 1), 1, 0)
selected_r01r03$r01g[is.na(selected_r01r03$r01g)] <- 0
#code the 1st mid column to "0" if the previous column said "0" (not applicable)
selected_r01r03$r01h = ifelse((selected_r01r03$r01g == 1), selected_r01r03$r01h,0)
selected_r01r03$r01h[is.na(selected_r01r03$r01h)] <- 0
#same procedure on r01n and r01o
selected_r01r03$r01n = ifelse((selected_r01r03$r01n == 1), 1, 0)
selected_r01r03$r01n[is.na(selected_r01r03$r01n)] <- 0
selected_r01r03$r01o = ifelse((selected_r01r03$r01n == 1), selected_r01r03$r01o,0)
selected_r01r03$r01o[is.na(selected_r01r03$r01o)] <- 0
#pivot longer mid columns
selected_r01r03 = selected_r01r03%>%
pivot_longer(cols = r01h:r01h_3, names_to = "r01h",values_drop_na = TRUE)%>%
dplyr::select(-r01h)%>%
dplyr::rename(r01h=value)%>%
pivot_longer(cols = r01o:r01o_3, names_to = "r01o",values_drop_na = TRUE)%>%
dplyr::select(-r01o)%>%
dplyr::rename(r01o=value)
#reorder columns
selected_r01r03 <- selected_r01r03[c("a01","hh_type","r01","r01a","r01b","r01c","r01d","r01e","r01f","r01g","r01h","r01i","r01j","r01k","r01l","r01m","r01n","r01o","r03")]
#set value label to the new column
var_label(selected_r01r03$r01g) <- "Is there any member/members in the hh who very rarely or does/do not use the lat"
var_label(selected_r01r03$r01h) <- "If yes, who are they?(mid)"
var_label(selected_r01r03$r01n) <- "Is there any cleansing agent at the hand wash area?"
var_label(selected_r01r03$r01o) <- "If yes, then list all the items that are there in the hand wash area."
# pivot_longer mid columns
selected_u = u_male_2015%>%
dplyr::select("a01", "hh_type","slno","u01","mid_1","mid_2","u02","u03","u04","u05","u06","u07","u09","u10","u08")%>%
pivot_longer(cols = mid_1:mid_2, names_to = "mid",values_drop_na = TRUE)%>%
dplyr::select(-mid)%>%
dplyr::rename(mid=value)
#set value label to the new column
var_label(selected_u$mid) <- "Member ID"
rm(list=ls(pattern="male"))
write.csv(w.I.roster.2015,"./rosters/w.I.roster_2015.csv",row.names=FALSE)
write.csv(w.hh.roster.2015,"./rosters/w.hh.roster_2015.csv",row.names=FALSE)
View(w.I.roster.2015)
####select the line for your directory
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project ',warning = FALSE, message=FALSE)
#knitr::opts_chunk$set(echo = FALSE,root.dir='/Users/juli/Desktop/BIHS/master/BIHS_Project ',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
#library(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS_Project")
#setwd("/Users/juli/Desktop/BIHS/master/BIHS_Project")
#this pulls in all 2015 household level files except the WEAI
filenames<-grep(list.files(path="./Data/Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Data/Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
if (i == "003_r2_male_mod_b1") {
assign(paste("b1_male_2015"),haven::read_dta(filepath))
}
assign(paste(substring(i,12),"_2015",sep=""),haven::read_dta(filepath))
}
#task(completed): inputagain "_mod_b1_2015" and rename to "b1_male_2015"
#read in the 2015 census and 2015 consumption file for now
#census_2015 = read_dta("./Raw Data/bihs_2015_2012/census/data/001_census_ftf.dta")
#x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2015 and also available in excel
menucodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
# task - aggregate `x1_1` `x1_2`
#count menu items
# task - rename x1_05 -> menu select the first 41 columns(drop the last one)
# rename x1_2 table x1_05 ->menu
x1_female_2015 = x1_1_female_2015 %>%
dplyr::rename(menu = x1_05)%>%
select(1:41)
x1_female_2015_2 = x1_2_female_2015 %>% dplyr::rename(menu = x1_05)
# task - aggregate `x1_1` `x1_2` to `x1_female_2015`
x1_female_2015 = rbind(x1_female_2015, x1_female_2015_2)
menu_items = aggregate(a01~menu, data=x1_female_2015, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2015
#issue with salt not being separated into iodine/non-iodine in 2015
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2015)
ingredientcodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
setwd("C:/Users/lilac2/Box/BIHS_Project")
#setwd("/Users/juli/Desktop/BIHS/master/BIHS_Project")
###Import nutrition data
FCT_Bangladesh =read_excel("./Data/Clean Data/nutrient tables/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./Data/Clean Data/nutrient tables/ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#task(completed):  line 165: cwgt does not exist, changed to "x1_09"
#task(completed): reorder columns of x1_female_2015 : move "hh_type"to the end
x1_female_2015 <- x1_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2)]
#join recipe dataset with menucodes to include menu names
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=x1_09)%>%
dplyr::select("a01","hh_type","rid","date","time","foodsource","menucode","menuname","menucookwt",contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2015_m)<-gsub("x1_07","icode",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("x1_08","iweight",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("_0","_",names(x1_f_2015_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2015_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278;2770=277;2771=277;2772=277;2773=277;2774=277;2775=277;2776=277;2781=278;2782=278;2841=284;2842=284;2843=284;2851=285;2852=285;2861=286;2862=286;2863=286;2871=287;2872=287;2801=280;2802=280")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,hh_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"95%",sep="_")]],recipe_hh[[paste(x,"95%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"5%",sep="_")]],recipe_hh[[paste(x,"5%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#rematch again for recipes that are actually ingredients
recipe_hh=left_join(recipe_hh,nutrients,by=c("menucode"="ingredient"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|is.na(recipe_hh[[paste("sum",x,sep="_")]]),
recipe_hh[[x]]*recipe_hh$sum_iweight, recipe_hh[[paste("sum",x,sep="_")]])
}
#check again for missing
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
View(recipe_hh)
View(recipe_hh)
View(recipe_med)
View(recipe_sum)
x1_female_2015 <- x1_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2)]
#join recipe dataset with menucodes to include menu names
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=x1_09)%>%
dplyr::select("a01","hh_type","rid","date","time","foodsource","menucode","menuname","menucookwt",contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2015_m)<-gsub("x1_07","icode",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("x1_08","iweight",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("_0","_",names(x1_f_2015_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2015_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278;2770=277;2771=277;2772=277;2773=277;2774=277;2775=277;2776=277;2781=278;2782=278;2841=284;2842=284;2843=284;2851=285;2852=285;2861=286;2862=286;2863=286;2871=287;2872=287;2801=280;2802=280")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,hh_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
#task(completed):  line 165: cwgt does not exist, changed to "x1_09"
#task(completed): reorder columns of x1_female_2015 : move "hh_type"to the end
x1_female_2015 <- x1_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2)]
#join recipe dataset with menucodes to include menu names
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=x1_09)%>%
dplyr::select("a01","hh_type","rid","date","time","foodsource","menucode","menuname","menucookwt",contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2015_m)<-gsub("x1_07","icode",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("x1_08","iweight",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("_0","_",names(x1_f_2015_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2015_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278;2770=277;2771=277;2772=277;2773=277;2774=277;2775=277;2776=277;2781=278;2782=278;2841=284;2842=284;2843=284;2851=285;2852=285;2861=286;2862=286;2863=286;2871=287;2872=287;2801=280;2802=280")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,hh_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
View(recipe_med)
View(recipe_hh)
View(recipes)
View(x1_female_2015)
####select the line for your directory
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project ',warning = FALSE, message=FALSE)
#knitr::opts_chunk$set(echo = FALSE,root.dir='/Users/juli/Desktop/BIHS/master/BIHS_Project ',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
#library(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS_Project")
#setwd("/Users/juli/Desktop/BIHS/master/BIHS_Project")
#this pulls in all 2015 household level files except the WEAI
filenames<-grep(list.files(path="./Data/Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Data/Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
if (i == "003_r2_male_mod_b1") {
assign(paste("b1_male_2015"),haven::read_dta(filepath))
}
assign(paste(substring(i,12),"_2015",sep=""),haven::read_dta(filepath))
}
#task(completed): inputagain "_mod_b1_2015" and rename to "b1_male_2015"
#read in the 2015 census and 2015 consumption file for now
#census_2015 = read_dta("./Raw Data/bihs_2015_2012/census/data/001_census_ftf.dta")
#x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2015 and also available in excel
menucodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
# task - aggregate `x1_1` `x1_2`
#count menu items
# task - rename x1_05 -> menu select the first 41 columns(drop the last one)
# rename x1_2 table x1_05 ->menu
x1_female_2015 = x1_1_female_2015 %>%
dplyr::rename(menu = x1_05)%>%
select(1:41)
x1_female_2015_2 = x1_2_female_2015 %>% dplyr::rename(menu = x1_05)
# task - aggregate `x1_1` `x1_2` to `x1_female_2015`
x1_female_2015 = rbind(x1_female_2015, x1_female_2015_2)
menu_items = aggregate(a01~menu, data=x1_female_2015, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2015
#issue with salt not being separated into iodine/non-iodine in 2015
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2015)
ingredientcodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
setwd("C:/Users/lilac2/Box/BIHS_Project")
#setwd("/Users/juli/Desktop/BIHS/master/BIHS_Project")
###Import nutrition data
FCT_Bangladesh =read_excel("./Data/Clean Data/nutrient tables/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./Data/Clean Data/nutrient tables/ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#task(completed):  line 165: cwgt does not exist, changed to "x1_09"
#task(completed): reorder columns of x1_female_2015 : move "hh_type"to the end
x1_female_2015 <- x1_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2)]
#join recipe dataset with menucodes to include menu names
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=x1_09)%>%
dplyr::select("a01","hh_type","rid","date","time","foodsource","menucode","menuname","menucookwt",contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2015_m)<-gsub("x1_07","icode",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("x1_08","iweight",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("_0","_",names(x1_f_2015_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2015_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278;2770=277;2771=277;2772=277;2773=277;2774=277;2775=277;2776=277;2781=278;2782=278;2841=284;2842=284;2843=284;2851=285;2852=285;2861=286;2862=286;2863=286;2871=287;2872=287;2801=280;2802=280")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,hh_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"95%",sep="_")]],recipe_hh[[paste(x,"95%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"5%",sep="_")]],recipe_hh[[paste(x,"5%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#rematch again for recipes that are actually ingredients
recipe_hh=left_join(recipe_hh,nutrients,by=c("menucode"="ingredient"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|is.na(recipe_hh[[paste("sum",x,sep="_")]]),
recipe_hh[[x]]*recipe_hh$sum_iweight, recipe_hh[[paste("sum",x,sep="_")]])
}
#check again for missing
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2015,x1_f_2015_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
#integrate with individual consumption data set and create individual calorie consumption
# #flag for individuals without consumption data
# datacheck = x2_f_2015  %>%
#   group_by(a01,x2_01) %>%
#   summarise(mealdata = n())%>%
#   filter(x2_01<100)%>%
#   dplyr::rename(mid=x2_01)
#task(completed): delete columns "sex""age"mem_stat""flag_x2" in x2_1_female_2015
#task(completed): combine x2_1_female_2015 and x2_1_female_2015 to x2_female_2015
#task(completed): move "hh_type" in x2_female_2015 to the end
x2_1_female_2015 <- x2_1_female_2015 %>% select(!c("sex","age","mem_stat","flag_x2"))
x2_female_2015 = rbind(x2_1_female_2015, x2_2_female_2015)
x2_female_2015 <- x2_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,2)]
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2015,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,
sample=hh_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-hh_type.y,-contains("sum_"))
nutrition_2015_I = recipe_I%>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter out if meal not taken
dplyr::summarise(mealdata=n(),I_kcal=sum(i_mealkcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
nrow(filter(nutrition_2015_I,I_kcal==0|is.na(I_kcal))) #56 without calorie info
rm(recipe_I,recipe_hh)
View(nutrition_2015_I)
