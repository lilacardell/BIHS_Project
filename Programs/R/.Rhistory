#
# recipe_med=recipe_sum%>%
#   mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
# filter(kcal>0)%>%
#   group_by(menucode)%>%
# dplyr::summarise(across(kcal:iron,p_funs))
#
#
# #resolve missing ingredients that are actually menu items by adding the median per gram nutrient info back into the recipe set and replace missing ingredients with median
# recipes=left_join(recipes,recipe_med,by=c("icode"="menucode"))
#
# for (x in nutnames){
# recipes[[x]]=if_else(recipes[[x]]==0|is.nan(recipes[[x]])|is.na(recipes[[x]]),recipes[[paste(x,"50%",sep="_")]]*recipes$iweight,
#                                 recipes[[x]])
# }
#
# #check for missing ingredients again
# missing = recipes[is.na(recipes$kcal),]
# missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
#   arrange(desc(a01)) #salt and other
#resolve for median per recipe
#sum nutrients over menu to come up with nutrients per menu item
recipe_sum=recipes%>%
group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 10% and 9% percentile per GRAM nutrient info for each meal
p <- c(.1,.5,.9)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"90%",sep="_")]],recipe_hh[[paste(x,"90%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"10%",sep="_")]],recipe_hh[[paste(x,"10%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#other
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
nutrition_2011_I = recipe_I%>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter only if meal not taken
dplyr::summarise(mealdata=n(),I_kcal=sum(i_mealkcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
missing_I=nutrition_2011_I%>%
filter(I_kcal<100|is.na(I_kcal)) #89 without any calorie info, 176 with less than 100 calories per day
View(missing_I)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE,
root.dir = 'C:/Users/lilac2/Box/BIHS_Project'
)
knitr::opts_knit$set(root.dir='C:/Users/lilac2/Box/BIHS_Project')
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled','DescTools')
lapply(packages, pkgTest)
rm(packages,pkgTest)
# Read in data for project
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Data/Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Data/Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2011 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Data/Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensive than 2011 and also available in excel (ingredient and menu codes are identical)
menucodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensive than 2011)
ingredientcodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
###Import nutrition data
FCT_Bangladesh =read_excel("./Data/Clean Data/nutrient tables/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./Data/Clean Data/nutrient tables/ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#join recipe dataset with menucodes to include menu names
x1_f_2011_m = left_join(x1_female_2011,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=cwgt)%>%
dplyr::select(1,41,6,43,8,7,9,42,12,contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522)) #this is salt
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2011_m)<-gsub("x1_07","icode",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("x1_08","iweight",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("_0","_",names(x1_f_2011_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same item
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2011_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278")))%>% #recode variables that are duplicates or very close substitutes
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient")) #join with ingredient set
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrient val per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01)) # most of these are actually menu items
# #sum nutrients over menu to come up with nutrients per menu item
# recipe_sum=recipes%>%
#   group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
#  dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
#   dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#
#
# #find the median and 5% and 95% percentile per GRAM nutrient info for each meal
# p <- c(.1,.5,.9)
# p_names <- paste0(p*100, "%")
# p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
#   set_names(nm = p_names)
#
# recipe_med=recipe_sum%>%
#   mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
# filter(kcal>0)%>%
#   group_by(menucode)%>%
# dplyr::summarise(across(kcal:iron,p_funs))
#
#
# #resolve missing ingredients that are actually menu items by adding the median per gram nutrient info back into the recipe set and replace missing ingredients with median
# recipes=left_join(recipes,recipe_med,by=c("icode"="menucode"))
#
# for (x in nutnames){
# recipes[[x]]=if_else(recipes[[x]]==0|is.nan(recipes[[x]])|is.na(recipes[[x]]),recipes[[paste(x,"50%",sep="_")]]*recipes$iweight,
#                                 recipes[[x]])
# }
#
# #check for missing ingredients again
# missing = recipes[is.na(recipes$kcal),]
# missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
#   arrange(desc(a01)) #salt and other
#resolve for median per recipe
#sum nutrients over menu to come up with nutrients per menu item
recipe_sum=recipes%>%
group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 10% and 9% percentile per GRAM nutrient info for each meal
p <- c(.1,.5,.9)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"90%",sep="_")]],recipe_hh[[paste(x,"90%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"10%",sep="_")]],recipe_hh[[paste(x,"10%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#other
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
View(recipe_I)
View(recipe_hh)
View(x2_female_2011)
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","x2_08"="menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","x2_meal"="time","menucode"))%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"))
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"))
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"),-menucookwt)
#for items that did not match, rematch to see if the time of day reporting was the reason
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)
View(recipe_I2)
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-contains("sum_"))
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"),-menucookwt,-date,-rid)
#for items that did not match, rematch to see if the time of day reporting was the reason
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-contains("sum_"))
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"),-menucookwt,-date,-rid,-foodsource,-menuname)
#for items that did not match, rematch to see if the time of day reporting was the reason
recipe_I2 = left_join(recipe_I,recipe_hh,by=c("a01","menucode"))%>%
#dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-contains("sum_"))
nrow(filter(recipe_I,is.na(i_mealkcal)))
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(across(sum_kcal:sum_iron,~.*(icookwt/iweight),na.rm=TRUE))%>%
#mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
#i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"),-menucookwt,-date,-rid,-foodsource,-menuname)
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = x2_female_2011%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12)%>%
left_join(recipe_hh,by=c("a01","meal_time"="time","menucode"))%>%
mutate(across(sum_kcal:sum_iron,~.*(icookwt/menucookwt),na.rm=TRUE))%>%
#mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
#i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-sample_type.x,-contains("sum_"),-menucookwt,-date,-rid,-foodsource,-menuname)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE,
root.dir = 'C:/Users/lilac2/Box/BIHS_Project'
)
knitr::opts_knit$set(root.dir='C:/Users/lilac2/Box/BIHS_Project')
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled','DescTools')
lapply(packages, pkgTest)
rm(packages,pkgTest)
# Read in data for project
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Data/Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Data/Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2011 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Data/Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensive than 2011 and also available in excel (ingredient and menu codes are identical)
menucodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensive than 2011)
ingredientcodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
###Import nutrition data
FCT_Bangladesh =read_excel("./Data/Clean Data/nutrient tables/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./Data/Clean Data/nutrient tables/ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#join recipe dataset with menucodes to include menu names
x1_f_2011_m = left_join(x1_female_2011,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=cwgt)%>%
dplyr::select(1,41,6,43,8,7,9,42,12,contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522)) #this is salt
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2011_m)<-gsub("x1_07","icode",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("x1_08","iweight",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("_0","_",names(x1_f_2011_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same item
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2011_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278")))%>% #recode variables that are duplicates or very close substitutes
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient")) #join with ingredient set
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrient val per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01)) # most of these are actually menu items
# #sum nutrients over menu to come up with nutrients per menu item
# recipe_sum=recipes%>%
#   group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
#  dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
#   dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#
#
# #find the median and 5% and 95% percentile per GRAM nutrient info for each meal
# p <- c(.1,.5,.9)
# p_names <- paste0(p*100, "%")
# p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
#   set_names(nm = p_names)
#
# recipe_med=recipe_sum%>%
#   mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
# filter(kcal>0)%>%
#   group_by(menucode)%>%
# dplyr::summarise(across(kcal:iron,p_funs))
#
#
# #resolve missing ingredients that are actually menu items by adding the median per gram nutrient info back into the recipe set and replace missing ingredients with median
# recipes=left_join(recipes,recipe_med,by=c("icode"="menucode"))
#
# for (x in nutnames){
# recipes[[x]]=if_else(recipes[[x]]==0|is.nan(recipes[[x]])|is.na(recipes[[x]]),recipes[[paste(x,"50%",sep="_")]]*recipes$iweight,
#                                 recipes[[x]])
# }
#
# #check for missing ingredients again
# missing = recipes[is.na(recipes$kcal),]
# missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
#   arrange(desc(a01)) #salt and other
#resolve for median per recipe
#sum nutrients over menu to come up with nutrients per menu item
recipe_sum=recipes%>%
group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 10% and 9% percentile per GRAM nutrient info for each meal
p <- c(.1,.5,.9)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"90%",sep="_")]],recipe_hh[[paste(x,"90%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"10%",sep="_")]],recipe_hh[[paste(x,"10%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#other
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
install.packages(c("data.table", "desc", "emmeans", "fda", "knitr", "mime", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "rootSolve", "s2", "srvyr", "tibble", "tidyr", "tinytex", "tis"))
install.packages(c("data.table", "knitr", "RcppArmadillo", "readr", "rootSolve", "srvyr", "tibble", "tidyr"))
install.packages(c("data.table", "knitr", "RcppArmadillo", "readr", "rootSolve", "srvyr", "tibble", "tidyr"))
install.packages(c("data.table", "knitr", "RcppArmadillo", "readr", "rootSolve", "srvyr", "tibble", "tidyr"))
install.packages(c("data.table", "knitr", "RcppArmadillo", "readr", "rootSolve", "srvyr", "tibble", "tidyr"))
install.packages(c("data.table", "tibble"))
install.packages(c("data.table", "tibble"))
install.packages(c("data.table", "tibble"))
install.packages("tibble")
install.packages("data.table")
install.packages("data.table")
install.packages(c("data.table", "tibble"))
