dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"95%",sep="_")]],recipe_hh[[paste(x,"95%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"5%",sep="_")]],recipe_hh[[paste(x,"5%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#rematch again for recipes that are actually ingredients
recipe_hh=left_join(recipe_hh,nutrients,by=c("menucode"="ingredient"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|is.na(recipe_hh[[paste("sum",x,sep="_")]]),
recipe_hh[[x]]*recipe_hh$sum_iweight, recipe_hh[[paste("sum",x,sep="_")]])
}
#check again for missing
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
#integrate with individual consumption data set and create individual calorie consumption
# #flag for individuals without consumption data
# datacheck = x2_f_2011  %>%
#   group_by(a01,x2_01) %>%
#   summarise(mealdata = n())%>%
#   filter(x2_01<100)%>%
#   dplyr::rename(mid=x2_01)
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,
sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
nutrition_2011_I = recipe_I%>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter out if meal not taken
dplyr::summarise(mealdata=n(),I_kcal=sum(i_mealkcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
nrow(filter(nutrition_2011_I,I_kcal==0|is.na(I_kcal))) #89 without calorie info
rm(recipe_I,recipe_hh)
#There are multiple data sets to corroborate:
# HH reports food purchase/produced/gifted within the last 7 days on o1_female
# HH reports food group consumption over last 7 days on x3_female
# HH reports consumption over prior 24 hours on x1_female
#sevenday_items_o1 = aggregate(a01~o1_01, data=o1_female_2011, FUN = length) #295 items
#sevenday_groups_x3 =
#oneday_items_x1 =
adult_2011=w1_female_2011%>%
mutate(BMI=w1_03/((w1_04/100)^2))%>%
mutate(BMI=na_if(BMI,0),pregnant=if_else(is.na(w1_01)|w1_01==2,0,1),lactating=if_else(is.na(w1_02)|w1_02==2,0,1))%>%
dplyr::rename(weight=w1_03,height=w1_04)%>%
dplyr::select(-starts_with("w1_"))
child_2011=w2_female_2011%>%
mutate(BMI=w2_07/((w2_08/100)^2))%>%
dplyr::rename(weight=w2_07,height=w2_08)%>%
dplyr::select(a01,mid,weight,height,sample_type,BMI)%>%
mutate(pregnant=0,lactating=0)
anthro_2011_I=bind_rows(adult_2011,child_2011)
# dupe=anthro_2011_I%>%
#   group_by(a01,mid,sample_type)%>%
#   filter(n()>1)
rm(adult_2011,child_2011)
setwd("C:/Users/lilac2/Box/BIHS_Project/Data/")
###CREATE INDIVIDUAL ROSTER###
#add BMI and nutrition consumption to individual roster_2011
roster_2011_I=left_join(b1_male_2011,anthro_2011_I,by=c("a01","mid","sample_type")) %>%
dplyr::rename(hhid=a01,sex=b1_01,age=b1_02,relation=b1_03,marital=b1_04,abroad=b1_05,literacy=b1_07,
education=b1_08,occupation=b1_10,sampletype=sample_type) %>%
left_join(nutrition_2011_I,by=c("hhid"="a01","mid"))
nrow(filter(roster_2011_I,is.na(mealdata))) #1158 are missing mealdata
roster_2011_I$mealdata[is.na(roster_2011_I$mealdata)] <- 0
roster_2011_I$pregnant[is.na(roster_2011_I$pregnant)] <- 0
roster_2011_I$lactating[is.na(roster_2011_I$lactating)] <- 0
nrow(filter(roster_2011_I,is.na(BMI))) #1724 are missing BMI
occupation_type = aggregate(mid~occupation, data=roster_2011_I, FUN = length) %>%
dplyr::rename(n_I=mid)%>%
left_join(occupationcodes,by=c("occupation"="occupation_code")) %>%
mutate(activity=if_else(occupation %in% c(1:8,10,15,22,30,54,64:71),"heavy",
if_else(occupation %in% c(11,23:27,29,31:37,54:63),"moderate",
"light")))%>%
dplyr::select(1,3,2,4)
#write.xlsx(occupation_type,"./Clean Data/occupations/occupation_category.xlsx")
#detach("package:plyr", unload = TRUE)
# add back activity level, count number of household members, and flag polygamous HH
roster_2011_I = roster_2011_I %>%
left_join(occupation_type,by="occupation")%>%
dplyr::select(-n_I,-occupation_name)%>%
#filter(!relation %in% c(16)) %>%
group_by(hhid)%>%
mutate(hhsize=n(),
boy=if_else(age<18 & sex==1,1,0),
girl=if_else(age<18 & sex==2,1,0),
man=if_else(age>=18 & sex==1,1,0),
woman=if_else(age>=18 & sex==2,1,0),
adult=if_else(boy==0 & girl==0,1,0),
child=if_else(man==0 & woman==0,1,0),
otheradult=ifelse(relation>2 & adult==1,1,0),
porl=if_else(pregnant==1 | lactating==1,1,0),
spouseabroad=if_else(abroad==1 & relation==2,1,0))%>%
ungroup()%>%
group_by(hhid,relation)%>%
mutate(poly=if_else(n()>1 & relation==2,1,0)) %>%
ungroup()%>%
dplyr::select(-contains("b1"))
nrow(filter(roster_2011_I,poly==1)) #30 individuals are duplicate partners (ie: 15 hh have two spouses)
rm(occupation_type,occupationcodes,anthro_2011_I,nutrition_2011_I)
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
library(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
setwd("C:/Users/lilac2/Box/BIHS_Project/Data/Clean Data/nutrient tables")
###Import nutrition data
FCT_Bangladesh =read_excel("./FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#join recipe dataset with menucodes to include menu names
x1_f_2011_m = left_join(x1_female_2011,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=cwgt)%>%
dplyr::select(1,41,6,43,8,7,9,42,12,contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2011_m)<-gsub("x1_07","icode",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("x1_08","iweight",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("_0","_",names(x1_f_2011_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2011_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"95%",sep="_")]],recipe_hh[[paste(x,"95%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"5%",sep="_")]],recipe_hh[[paste(x,"5%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#rematch again for recipes that are actually ingredients
recipe_hh=left_join(recipe_hh,nutrients,by=c("menucode"="ingredient"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|is.na(recipe_hh[[paste("sum",x,sep="_")]]),
recipe_hh[[x]]*recipe_hh$sum_iweight, recipe_hh[[paste("sum",x,sep="_")]])
}
#check again for missing
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
#integrate with individual consumption data set and create individual calorie consumption
# #flag for individuals without consumption data
# datacheck = x2_f_2011  %>%
#   group_by(a01,x2_01) %>%
#   summarise(mealdata = n())%>%
#   filter(x2_01<100)%>%
#   dplyr::rename(mid=x2_01)
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,
sample=sample_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
nutrition_2011_I = recipe_I%>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter out if meal not taken
dplyr::summarise(mealdata=n(),I_kcal=sum(i_mealkcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
nrow(filter(nutrition_2011_I,I_kcal==0|is.na(I_kcal))) #89 without calorie info
rm(recipe_I,recipe_hh)
#There are multiple data sets to corroborate:
# HH reports food purchase/produced/gifted within the last 7 days on o1_female
# HH reports food group consumption over last 7 days on x3_female
# HH reports consumption over prior 24 hours on x1_female
#sevenday_items_o1 = aggregate(a01~o1_01, data=o1_female_2011, FUN = length) #295 items
#sevenday_groups_x3 =
#oneday_items_x1 =
adult_2011=w1_female_2011%>%
mutate(BMI=w1_03/((w1_04/100)^2))%>%
mutate(BMI=na_if(BMI,0),pregnant=if_else(is.na(w1_01)|w1_01==2,0,1),lactating=if_else(is.na(w1_02)|w1_02==2,0,1))%>%
dplyr::rename(weight=w1_03,height=w1_04)%>%
dplyr::select(-starts_with("w1_"))
child_2011=w2_female_2011%>%
mutate(BMI=w2_07/((w2_08/100)^2))%>%
dplyr::rename(weight=w2_07,height=w2_08)%>%
dplyr::select(a01,mid,weight,height,sample_type,BMI)%>%
mutate(pregnant=0,lactating=0)
anthro_2011_I=bind_rows(adult_2011,child_2011)
# dupe=anthro_2011_I%>%
#   group_by(a01,mid,sample_type)%>%
#   filter(n()>1)
rm(adult_2011,child_2011)
setwd("C:/Users/lilac2/Box/BIHS_Project/Data/")
###CREATE INDIVIDUAL ROSTER###
#add BMI and nutrition consumption to individual roster_2011
roster_2011_I=left_join(b1_male_2011,anthro_2011_I,by=c("a01","mid","sample_type")) %>%
dplyr::rename(hhid=a01,sex=b1_01,age=b1_02,relation=b1_03,marital=b1_04,abroad=b1_05,literacy=b1_07,
education=b1_08,occupation=b1_10,sampletype=sample_type) %>%
left_join(nutrition_2011_I,by=c("hhid"="a01","mid"))
nrow(filter(roster_2011_I,is.na(mealdata))) #1158 are missing mealdata
roster_2011_I$mealdata[is.na(roster_2011_I$mealdata)] <- 0
roster_2011_I$pregnant[is.na(roster_2011_I$pregnant)] <- 0
roster_2011_I$lactating[is.na(roster_2011_I$lactating)] <- 0
nrow(filter(roster_2011_I,is.na(BMI))) #1724 are missing BMI
occupation_type = aggregate(mid~occupation, data=roster_2011_I, FUN = length) %>%
dplyr::rename(n_I=mid)%>%
left_join(occupationcodes,by=c("occupation"="occupation_code")) %>%
mutate(activity=if_else(occupation %in% c(1:8,10,15,22,30,54,64:71),"heavy",
if_else(occupation %in% c(11,23:27,29,31:37,54:63),"moderate",
"light")))%>%
dplyr::select(1,3,2,4)
#write.xlsx(occupation_type,"./Clean Data/occupations/occupation_category.xlsx")
#detach("package:plyr", unload = TRUE)
# add back activity level, count number of household members, and flag polygamous HH
roster_2011_I = roster_2011_I %>%
left_join(occupation_type,by="occupation")%>%
dplyr::select(-n_I,-occupation_name)%>%
#filter(!relation %in% c(16)) %>%
group_by(hhid)%>%
mutate(hhsize=n(),
boy=if_else(age<18 & sex==1,1,0),
girl=if_else(age<18 & sex==2,1,0),
man=if_else(age>=18 & sex==1,1,0),
woman=if_else(age>=18 & sex==2,1,0),
adult=if_else(boy==0 & girl==0,1,0),
child=if_else(man==0 & woman==0,1,0),
otheradult=ifelse(relation>2 & adult==1,1,0),
porl=if_else(pregnant==1 | lactating==1,1,0),
spouseabroad=if_else(abroad==1 & relation==2,1,0))%>%
ungroup()%>%
group_by(hhid,relation)%>%
mutate(poly=if_else(n()>1 & relation==2,1,0)) %>%
ungroup()%>%
dplyr::select(-contains("b1"))
nrow(filter(roster_2011_I,poly==1)) #30 individuals are duplicate partners (ie: 15 hh have two spouses)
rm(occupation_type,occupationcodes,anthro_2011_I,nutrition_2011_I)
###create household level roster_2011 and add AE by OECD definition
roster_2011_hh = roster_2011_I %>%
group_by(hhid) %>%
dplyr::summarise(hhsize = n(), adult=sum(adult),child=sum(child), poly=max(poly),
boy=sum(boy),girl=sum(girl),otheradult=sum(otheradult),
porl_hh=sum(porl,na.rm=TRUE), spouseabroad_hh=sum(spouseabroad,na.rm=TRUE),
mealdata_hhmin=min(mealdata),hh_kcal=sum(I_kcal,na.rm=TRUE),hh_protein=sum(I_protein,na.rm=TRUE),hh_fat=sum(I_fat,na.rm=TRUE),
hh_carb=sum(I_carb,na.rm=TRUE),hh_calcium=sum(I_calcium,na.rm=TRUE),hh_iron=sum(I_iron,na.rm=TRUE),
sampletype=first(sampletype)) %>%
mutate(porl_hh=if_else(is.na(porl_hh),0,porl_hh),AE_OECD=1+0.5*(adult-1)+0.3*child)
#6503 households
#filter individual roster_2011 to create head and spouse roster_2011s
roster_2011_head = filter(roster_2011_I,relation==1) %>%
mutate(agehead=age, sexhead=sex,
maritalhead=marital,
abroadhead=if_else(abroad==1,1,0),
lithead=if_else(literacy==4,1,0),
noschoolhead=if_else(education==99,1,0),
secondschoolhead=if_else(education %in% c(10:12,22,33),1,0),
agworkhead=if_else(occupation %in% c(1,64:71),1,0),
BMIhead=BMI,I_kcalhead=I_kcal) %>%
dplyr::select(hhid,contains("head"))
#6503 heads
roster_2011_spouse = filter(roster_2011_I,relation==2) %>%
mutate(agespouse=age,sexspouse=sex,
abroadspouse=if_else(abroad==1,1,0),
litspouse=if_else(literacy==4,1,0),
noschoolspouse=if_else(education==99,1,0),
secondschoolspouse=if_else(education %in% c(10:12,22,33),1,0),
agworkspouse=if_else(occupation %in% c(1,64:71),1,0),
BMIspouse=BMI,I_kcalspouse=I_kcal)%>%
dplyr::select(hhid,ends_with("spouse"))
#5225 spouses
#add head and spouse characteristics back to household level roster_2011
roster_2011_hh=full_join(roster_2011_hh,roster_2011_head,by="hhid")
roster_2011_hh=full_join(roster_2011_hh,roster_2011_spouse,by="hhid")
#6518 households = 6503+15 additional spouses in poly hh
dupe_hh = roster_2011_hh %>%
#filter(sampletype==2 |sampletype==3)%>%
group_by(hhid) %>%
filter(n() > 1)#30 poly HH
roster_2011_hh= distinct(roster_2011_hh,hhid, .keep_all= TRUE) #keeps only one line for each poly HH because HH level var are equivalent
rm(roster_2011_head,roster_2011_spouse,dupe_hh)
villages = aggregate(a01~vcode_n, data=a_male_2011, FUN = length) #318 villages
upazilla = aggregate(a01~uzcode, data=a_male_2011, FUN = length) #279 upazilla
#calculate household level weekly food expenditure
foodexp_2011 = left_join(o1_female_2011,a_male_2011,by="a01")%>%
dplyr::select(a01,contains("o1"),vcode_n,dcode)%>%
mutate(o1_07a=if_else(o1_04 %in% c(1,2,3),o1_08/o1_06,o1_08/o1_05)) #category 1 is kg, cat 2 is g, 3 is liter, and now 4 is g
#mutate(o1_06a=if_else(o1_04==2,o1_06/1000,o1_06), #change grams into kilos
# o1_07a=if_else(o1_04==4,(o1_08/o1_05)/1000,o1_07))%>% #alternate unit price=total val/number of kg reported
missing_exp=foodexp_2011%>%
filter(is.na(o1_07a))
#calculate village level prices: unit mean and unit median prices if there are more than 3 observations in the village for the food item
# prices_village = o1_f_2011_hh%>%
#   dplyr::select(vcode_n,dcode,o1_01,o1_04,o1_06,o1_07,o1_08)%>%
#   arrange(dcode,vcode_n,o1_01,o1_04,o1_07)%>%
#   group_by(o1_01,vcode_n) %>%
#   filter(!is.na(o1_07))%>%
#   dplyr::summarise(unitprice=ifelse(n()>3,mean(o1_07),0),medprice=ifelse(n()>3,median(o1_08/o1_06),0))%>%
#   dplyr::na_if(0) #convert zero to NA
prices=foodexp_2011%>%
dplyr::select(o1_01,o1_04,o1_06,o1_07,o1_07a,o1_08)%>%
#arrange(o1_01,o1_04)%>%
group_by(o1_01,o1_04) %>%
dplyr::summarise(mp=median(o1_07a,na.rm=TRUE))
# filter(!is.na(o1_07))%>%
# dplyr::summarise(unitprice=ifelse(n()>3,mean(o1_07),0),medprice=ifelse(n()>3,median(o1_08/o1_06),0))%>%
# dplyr::na_if(0) #convert zero to NA
#join food expenditures with village food prices
foodexp_2011 = left_join(foodexp_2011,prices,by=c("o1_01","o1_04"))%>%
mutate(foodprod=mp*o1_10,foodother=mp*o1_11) %>%
dplyr::na_if(0) #convert zero to NA
foodexp_2011_hh = foodexp_2011%>%
group_by(a01) %>%
dplyr::summarise(foodpurch_hhwk=sum(o1_08,na.rm=TRUE),foodprod_hhwk=sum(foodprod,na.rm=TRUE),
foodother_hhwk=sum(foodother,na.rm=TRUE))%>%
mutate(foodtot_hhwk=rowSums(.[2:3],na.rm=TRUE)) #only include purch and prod
#calculate household level weekly nonfood expenditure from monthly
nonfoodexp_2011_m = p1_male_2011 %>%
group_by(a01) %>%
dplyr::summarise(p1_02=sum(p1_02,na.rm=TRUE),p1_04=sum(p1_04,na.rm=TRUE)) %>%
mutate(nonfoodexp1_hhwk=(p1_02+p1_04)*12/52)
#calculate household level weekly nonfood expenditure from annual
nonfoodexp_2011_y = p2_male_2011 %>%
group_by(a01) %>%
dplyr::summarise(p2_03=sum(p2_03,na.rm=TRUE),p2_06=sum(p2_06,na.rm=TRUE)) %>%
mutate(nonfoodexp2_hhwk=(p2_03+p2_06)/52)
#combine all nonfood exp expenditures
nonfoodexp_2011_hh=left_join(nonfoodexp_2011_m,nonfoodexp_2011_y,by="a01") %>%
mutate(nonfoodexp_hhwk=nonfoodexp1_hhwk + nonfoodexp2_hhwk) %>%
dplyr::select(a01,nonfoodexp_hhwk)
#add food expenditures to household roster_2011
roster_2011_hh=left_join(roster_2011_hh,nonfoodexp_2011_hh,by=c("hhid"="a01")) %>%
mutate(nonfoodexp_hhwk_pc=nonfoodexp_hhwk/hhsize,
nonfoodexp_hhwk_AE_OECD=nonfoodexp_hhwk/AE_OECD)%>%
left_join(foodexp_2011_hh,by=c("hhid"="a01")) %>%
mutate(foodpurch_hhwk_pc = foodpurch_hhwk/hhsize,
foodpurch_hhwk_AE_OECD = foodpurch_hhwk/AE_OECD,
foodtot_hhwk_pc = foodtot_hhwk/hhsize,
foodtot_hhwk_AE_OECD = foodtot_hhwk/AE_OECD)%>%
mutate(foodshare=if_else(nonfoodexp_hhwk>0 & foodtot_hhwk>0,foodtot_hhwk/(foodtot_hhwk+nonfoodexp_hhwk),0),
totexp_hhwk=nonfoodexp_hhwk+foodtot_hhwk)
#dplyr::na_if(roster_2011_hh$foodshare,0) #convert zero to NA
rm(nonfoodexp_m_hh,nonfoodexp_y_hh,upazilla,villages,prices,foodexp_2011,foodexp_2011_hh,nonfoodexp_2011_hh,nonfoodexp_2011_m,nonfoodexp_2011_y,missing_exp)
foodsecurity=x3_female_2011%>%
dplyr::rename(hhid=a01,nofood_freq=x3_02,hungrynight_freq=x3_04,hungryday_freq=x3_06)%>%
mutate(nofood=if_else(x3_01==1,1,0),hungrynight=if_else(x3_03==1,1,0),hungryday=if_else(x3_05==1,1,0))%>%
mutate(cereal_days=x3_07_1+x3_07_2+x3_07_4,
tuber_days=x3_07_3,
vegetable_days=x3_07_5,
fruit_days=x3_07_6 ,
meat_days=x3_07_10+x3_07_11,
egg_days=x3_07_8,
seafood_days=x3_07_12 ,
pulse_days=x3_07_7+x3_07_16,
milk_days=x3_07_9,
fat_days=x3_07_13 ,
sugar_days=x3_07_14 ,
misc_days=x3_07_15+x3_07_17)%>%
mutate_at(.vars=vars(contains("days")),.funs=list(~as.numeric(.)))%>%
mutate_at(.vars=vars(contains("days")),.funs=list(~if_else(.>7,7,.)))%>%
mutate_at(.vars=vars(contains("days")),.funs=funs(`1`=if_else(.>0,1,0)))%>%
rename_at(.vars=vars(contains("days")),.funs=funs(sub("_days_1","",.)))%>%
dplyr::select(-contains("x"))%>%
mutate(hhds=rowSums(.[21:32],na.rm=TRUE))%>%
dplyr::select(hhid,hhds,contains("food"),contains("hungry"),-contains("freq"),-contains("seafood"))
# fx=function(x){
#   mutate(temp=if_else(x>0,1,0))
#   dplyr::rename(gsub("_days","",x)==temp)
# }
#add back to HH level roster
roster_2011_hh=left_join(roster_2011_hh,foodsecurity,by="hhid")
rm(foodsecurity)
#breakdown of assistance type (for all households)
# assistance = u_male_2011 %>%
#   filter(u01==1)
#
# assistance_count = aggregate(a01~slno, data=assistance, FUN = length)
# %>%
#   group_by(a01)%>%
#   summarise(u01_hh=n(mid_1)+n(mid_2))
rm(list=ls(pattern="male"))
