x1_female_2015_2 = x1_2_female_2015 %>% dplyr::rename(menu = x1_05)
# task - aggregate `x1_1` `x1_2` to `x1_female_2015`
x1_female_2015 = rbind(x1_female_2015, x1_female_2015_2)
menu_items = aggregate(a01~menu, data=x1_female_2015, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2015
#issue with salt not being separated into iodine/non-iodine in 2015
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2015)
ingredientcodes = read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Data/Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
#setwd("C:/Users/lilac2/Box/BIHS_Project")
setwd("D:/UIUC/SP21/BIHSgit/BIHS_Project")
###Import nutrition data
FCT_Bangladesh =read_excel("./Data/Clean Data/nutrient tables/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./Data/Clean Data/nutrient tables/ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
#task(completed):  line 165: cwgt does not exist, changed to "x1_09"
#task(completed): reorder columns of x1_female_2015 : move "hh_type"to the end
x1_female_2015 <- x1_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,2)]
#join recipe dataset with menucodes to include menu names
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=x1_09)%>%
dplyr::select("a01","hh_type","rid","date","time","foodsource","menucode","menuname","menucookwt",contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2015_m)<-gsub("x1_07","icode",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("x1_08","iweight",names(x1_f_2015_m))
names(x1_f_2015_m)<-gsub("_0","_",names(x1_f_2015_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,3:8))
recipes=melt(setDT(x1_f_2015_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~recode(.,"14=10;90=80;93=92;95=94;103=157;107=998;108=157;110=157;112=157;115=157;126=123;185=215;187=186;188=189;193=181;204=179;211=179;212=999;217=222;218=226;227=2287;229=228;233=232;235=213;237=189;238=189;243=242;246=999;247=999;253=999;256=999;257=999;261=260;267=162;269=999;305=3121;310=309;311=3121;314=999;905=998;908=189;902=997;909=213;1323=132;1421=142;1422=142;2521=252;2522=252;2886=2885;2876=2873;2896=2894;2781=278;2782=278;2770=277;2771=277;2772=277;2773=277;2774=277;2775=277;2776=277;2781=278;2782=278;2841=284;2842=284;2843=284;2851=285;2852=285;2861=286;2862=286;2863=286;2871=287;2872=287;2801=280;2802=280")))%>%
mutate_at(.vars=vars(contains("code")),.funs=list(~as.numeric(.)))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#library(plyr)
# mutate(across(c("menucode","icode"),~as.numeric(.)))%>%
# mutate(across(c("menucode","icode"),~plyr::revalue(.,c("14"="10","90"="80","93=92","95=94","103=157","107=998","108=157","110=157","112=157","115=157","126=123","185=215","187=186","188=189","193=181","204=179","211=195","212=999","217=222","218=226","227=2287","229=228","233=232","235=213","237=189","238=189","243=242","246=999","247=999","253=999","256=999","257=999","261=260","267=162","269=999","305=312","310=309","311=312","314=999","905=998","908=189","902=997","909=213","1323=132","1421=142","1422=142","2521=252","2522=252","2886=2885","2876=2873","2896=2894","2781=278","2782=278"))))%>%left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,hh_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
dplyr::summarise_at(vars(iweight,contains("_c")),sum,na.rm=TRUE)%>%
dplyr::rename_at(.vars=vars(contains("_c")),.funs=funs(sub("_c","",.)))
#find the median and 5% and 95% percentile per gram nutrient info for each meal
p <- c(.05,.5,.95)
p_names <- paste0(p*100, "%")
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
recipe_med=recipe_sum%>%
mutate(across(kcal:iron,~./iweight,na.rm=TRUE))%>%
filter(kcal>0)%>%
group_by(menucode)%>%
dplyr::summarise(across(kcal:iron,p_funs))
#add the median per gram nutrient info back into the recipe set and replace missing items with median and winsorize at 5%
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode"))
for (x in nutnames){
recipe_hh[[x]]=if_else(recipe_hh[[x]]==0|is.nan(recipe_hh[[x]])|is.na(recipe_hh[[x]]),recipe_hh[[paste(x,"50%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]>recipe_hh[[paste(x,"95%",sep="_")]],recipe_hh[[paste(x,"95%",sep="_")]]*recipe_hh$iweight,
if_else(recipe_hh[[x]]<recipe_hh[[paste(x,"5%",sep="_")]],recipe_hh[[paste(x,"5%",sep="_")]]*recipe_hh$iweight,
recipe_hh[[x]])))
}
recipe_hh=recipe_hh%>%
dplyr::select(1:16)%>%
dplyr::rename_at(.vars=vars(10:16),.funs=funs(paste("sum",.,sep="_")))
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
#rematch again for recipes that are actually ingredients
recipe_hh=left_join(recipe_hh,nutrients,by=c("menucode"="ingredient"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|is.na(recipe_hh[[paste("sum",x,sep="_")]]),
recipe_hh[[x]]*recipe_hh$sum_iweight, recipe_hh[[paste("sum",x,sep="_")]])
}
#check again for missing
#investigate recipes that are still missing nutrient info
missing = recipe_hh[is.na(recipe_hh$sum_kcal),]
missing_recipes = aggregate(a01~menucode+menuname, data=missing, FUN = length) %>%
arrange(desc(a01))
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2015,x1_f_2015_m,x,menu_items,ingredientcodes,missing_ingredients,missing_recipes,p,p_funs,p_names)
#integrate with individual consumption data set and create individual calorie consumption
#there are issues with missing consumption (172 people) and inflated calories counts
# #flag for individuals without consumption data
# datacheck = x2_f_2015  %>%
#   group_by(a01,x2_01) %>%
#   summarise(mealdata = n())%>%
#   filter(x2_01<100)%>%
#   dplyr::rename(mid=x2_01)
#task(completed): delete columns "sex""age"mem_stat""flag_x2" in x2_1_female_2015
#task(completed): combine x2_1_female_2015 and x2_1_female_2015 to x2_female_2015
#task(completed): move "hh_type" in x2_female_2015 to the end
x2_1_female_2015 <- x2_1_female_2015 %>% select(!c("sex","age","mem_stat","flag_x2"))
x2_female_2015 = rbind(x2_1_female_2015, x2_2_female_2015)
x2_female_2015 <- x2_female_2015[,c(1,3,4,5,6,7,8,9,10,11,12,13,2)]
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2015,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,
sample=hh_type.x)%>%
mutate(i_mealkcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-hh_type.y,-contains("sum_"))
nutrition_2015_I = recipe_I%>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter out if meal not taken
dplyr::summarise(mealdata=n(),I_kcal=sum(i_mealkcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
nrow(filter(nutrition_2015_I,I_kcal==0|is.na(I_kcal))) #172 without calorie info
rm(recipe_I,recipe_hh)
#There are multiple data sets to corroborate:
# HH reports food purchase/produced/gifted within the last 7 days on o1_female
# HH reports food group consumption over last 7 days on x3_female
# HH reports consumption over prior 24 hours on x1_female
#sevenday_items_o1 = aggregate(a01~o1_01, data=o1_female_2015, FUN = length) #295 items
#sevenday_groups_x3 =
#oneday_items_x1 =
adult_2015=w1_female_2015%>%
mutate(BMI=w1_03/((w1_04/100)^2))%>%
mutate(BMI=na_if(BMI,0),pregnant=if_else(is.na(w1_01)|w1_01==2,0,1),lactating=if_else(is.na(w1_02)|w1_02==2,0,1))%>%
dplyr::rename(weight=w1_03,height=w1_04)%>%
dplyr::select(-starts_with("w1_"))
child_2015=w2_female_2015%>%
mutate(BMI=w2_07/((w2_08/100)^2))%>%
dplyr::rename(weight=w2_07,height=w2_08)%>%
dplyr::select(a01,mid,weight,height,hh_type,BMI)%>%
mutate(pregnant=0,lactating=0)
anthro_2015_I=bind_rows(adult_2015,child_2015)
# dupe=anthro_2015_I%>%
#   group_by(a01,mid,hh_type)%>%
#   filter(n()>1)
rm(adult_2015,child_2015)
###CREATE INDIVIDUAL ROSTER###
#add BMI and nutrition consumption to individual roster_2015\
#task(completed): delete "sex","age" columns in anthro_2015_I
anthro_2015_I <- anthro_2015_I %>% select(!c("sex","age"))
roster_2015_I=left_join(b1_male_2015,anthro_2015_I,by=c("a01","mid")) %>%
dplyr::rename(hhid=a01,sex=b1_01,age=b1_02,relation=b1_03,marital=b1_04,abroad=b1_05,literacy=b1_07,
education=b1_08,occupation=b1_10,sampletype=hh_type) %>%
left_join(nutrition_2015_I,by=c("hhid"="a01","mid"))
nrow(filter(roster_2015_I,is.na(mealdata))) #1158 are missing mealdata
roster_2015_I$mealdata[is.na(roster_2015_I$mealdata)] <- 0
roster_2015_I$pregnant[is.na(roster_2015_I$pregnant)] <- 0
roster_2015_I$lactating[is.na(roster_2015_I$lactating)] <- 0
nrow(filter(roster_2015_I,is.na(BMI))) #1724 are missing BMI
occupation_type = aggregate(mid~occupation, data=roster_2015_I, FUN = length) %>%
dplyr::rename(n_I=mid)%>%
left_join(occupationcodes,by=c("occupation"="occupation_code")) %>%
mutate(activity=if_else(occupation %in% c(1:8,10,15,22,30,54,64:71),"heavy",
if_else(occupation %in% c(11,23:27,29,31:37,54:63),"moderate",
"light")))%>%
dplyr::select(1,3,2,4)
#write.xlsx(occupation_type,"./Clean Data/occupations/occupation_category.xlsx")
#detach("package:plyr", unload = TRUE)
# add back activity level, count number of household members, and flag polygamous HH
roster_2015_I = roster_2015_I %>%
left_join(occupation_type,by="occupation")%>%
dplyr::select(-n_I,-occupation_name)%>%
#filter(!relation %in% c(16)) %>%
group_by(hhid)%>%
dplyr::mutate(hhsize=n(),
boy=if_else(age<18 & sex==1,1,0),
girl=if_else(age<18 & sex==2,1,0),
man=if_else(age>=18 & sex==1,1,0),
woman=if_else(age>=18 & sex==2,1,0),
adult=if_else(boy==0 & girl==0,1,0),
child=if_else(man==0 & woman==0,1,0),
otheradult=ifelse(relation>2 & adult==1,1,0),
porl=if_else(pregnant==1 | lactating==1,1,0),
spouseabroad=if_else(abroad==1 & relation==2,1,0))%>%
ungroup()%>%
group_by(hhid,relation)%>%
dplyr::mutate(poly=if_else(n()>1 & relation==2,1,0)) %>%
ungroup()%>%
dplyr::select(-contains("b1"))
nrow(filter(roster_2015_I,poly==1)) #30 individuals are duplicate partners (ie: 15 hh have two spouses)
rm(occupation_type,occupationcodes,anthro_2015_I,nutrition_2015_I)
###create household level roster_2015 and add AE by OECD definition
roster_2015_hh = roster_2015_I %>%
group_by(hhid) %>%
dplyr::summarise(hhsize = n(), adult=sum(adult),child=sum(child), poly=max(poly),
boy=sum(boy),girl=sum(girl),otheradult=sum(otheradult),
porl_hh=sum(porl,na.rm=TRUE), spouseabroad_hh=sum(spouseabroad,na.rm=TRUE),
mealdata_hhmin=min(mealdata),hh_kcal=sum(I_kcal,na.rm=TRUE),hh_protein=sum(I_protein,na.rm=TRUE),hh_fat=sum(I_fat,na.rm=TRUE),
hh_carb=sum(I_carb,na.rm=TRUE),hh_calcium=sum(I_calcium,na.rm=TRUE),hh_iron=sum(I_iron,na.rm=TRUE),
sampletype=first(sampletype)) %>%
mutate(porl_hh=if_else(is.na(porl_hh),0,porl_hh),AE_OECD=1+0.5*(adult-1)+0.3*child)
#6503 households
#filter individual roster_2015 to create head and spouse roster_2015s
roster_2015_head = filter(roster_2015_I,relation==1) %>%
mutate(agehead=age, sexhead=sex,
maritalhead=marital,
abroadhead=if_else(abroad==1,1,0),
lithead=if_else(literacy==4,1,0),
noschoolhead=if_else(education==99,1,0),
secondschoolhead=if_else(education %in% c(10:12,22,33),1,0),
agworkhead=if_else(occupation %in% c(1,64:71),1,0),
BMIhead=BMI,I_kcalhead=I_kcal) %>%
dplyr::select(hhid,contains("head"))
#6503 heads
roster_2015_spouse = filter(roster_2015_I,relation==2) %>%
mutate(agespouse=age,sexspouse=sex,
abroadspouse=if_else(abroad==1,1,0),
litspouse=if_else(literacy==4,1,0),
noschoolspouse=if_else(education==99,1,0),
secondschoolspouse=if_else(education %in% c(10:12,22,33),1,0),
agworkspouse=if_else(occupation %in% c(1,64:71),1,0),
BMIspouse=BMI,I_kcalspouse=I_kcal)%>%
dplyr::select(hhid,ends_with("spouse"))
#5225 spouses
#add head and spouse characteristics back to household level roster_2015
roster_2015_hh=full_join(roster_2015_hh,roster_2015_head,by="hhid")
roster_2015_hh=full_join(roster_2015_hh,roster_2015_spouse,by="hhid")
#6518 households = 6503+15 additional spouses in poly hh
dupe_hh = roster_2015_hh %>%
#filter(sampletype==2 |sampletype==3)%>%
group_by(hhid) %>%
filter(n() > 1)#30 poly HH
roster_2015_hh= distinct(roster_2015_hh,hhid, .keep_all= TRUE) #keeps only one line for each poly HH because HH level var are equivalent
rm(roster_2015_head,roster_2015_spouse,dupe_hh)
#task: change vcode_n to Village
villages = aggregate(a01~Village, data=a_male_2015, FUN = length) #318 villages
upazilla = aggregate(a01~uzcode, data=a_male_2015, FUN = length) #279 upazilla
#calculate household level weekly food expenditure
foodexp_2015 = left_join(o1_female_2015,a_male_2015,by="a01")%>%
dplyr::select(a01,contains("o1"),Village,dcode)%>%
mutate(o1_07a=if_else(o1_04 %in% c(1,2,3),o1_08/o1_06,o1_08/o1_05)) #category 1 is kg, cat 2 is g, 3 is liter, and now 4 is g
#mutate(o1_06a=if_else(o1_04==2,o1_06/1000,o1_06), #change grams into kilos
# o1_07a=if_else(o1_04==4,(o1_08/o1_05)/1000,o1_07))%>% #alternate unit price=total val/number of kg reported
missing_exp=foodexp_2015%>%
filter(is.na(o1_07a))
#calculate village level prices: unit mean and unit median prices if there are more than 3 observations in the village for the food item
# prices_village = o1_f_2015_hh%>%
#   dplyr::select(vcode_n,dcode,o1_01,o1_04,o1_06,o1_07,o1_08)%>%
#   arrange(dcode,vcode_n,o1_01,o1_04,o1_07)%>%
#   group_by(o1_01,vcode_n) %>%
#   filter(!is.na(o1_07))%>%
#   dplyr::summarise(unitprice=ifelse(n()>3,mean(o1_07),0),medprice=ifelse(n()>3,median(o1_08/o1_06),0))%>%
#   dplyr::na_if(0) #convert zero to NA
prices=foodexp_2015%>%
dplyr::select(o1_01,o1_04,o1_06,o1_07,o1_07a,o1_08)%>%
#arrange(o1_01,o1_04)%>%
group_by(o1_01,o1_04) %>%
dplyr::summarise(mp=median(o1_07a,na.rm=TRUE))
# filter(!is.na(o1_07))%>%
# dplyr::summarise(unitprice=ifelse(n()>3,mean(o1_07),0),medprice=ifelse(n()>3,median(o1_08/o1_06),0))%>%
# dplyr::na_if(0) #convert zero to NA
#join food expenditures with village food prices
foodexp_2015 = left_join(foodexp_2015,prices,by=c("o1_01","o1_04"))%>%
mutate(foodprod=mp*o1_10,foodother=mp*o1_11) %>%
dplyr::na_if(0) #convert zero to NA
foodexp_2015_hh = foodexp_2015%>%
group_by(a01) %>%
dplyr::summarise(foodpurch_hhwk=sum(o1_08,na.rm=TRUE),foodprod_hhwk=sum(foodprod,na.rm=TRUE),
foodother_hhwk=sum(foodother,na.rm=TRUE))%>%
mutate(foodtot_hhwk=rowSums(.[2:3],na.rm=TRUE)) #only include purch and prod
#calculate household level weekly nonfood expenditure from monthly
nonfoodexp_2015_m = p1_male_2015 %>%
group_by(a01) %>%
dplyr::summarise(p1_02=sum(p1_02,na.rm=TRUE),p1_04=sum(p1_04,na.rm=TRUE)) %>%
mutate(nonfoodexp1_hhwk=(p1_02+p1_04)*12/52)
#calculate household level weekly nonfood expenditure from annual
nonfoodexp_2015_y = p2_male_2015 %>%
group_by(a01) %>%
dplyr::summarise(p2_03=sum(p2_03,na.rm=TRUE),p2_06=sum(p2_06,na.rm=TRUE)) %>%
mutate(nonfoodexp2_hhwk=(p2_03+p2_06)/52)
#combine all nonfood exp expenditures
nonfoodexp_2015_hh=left_join(nonfoodexp_2015_m,nonfoodexp_2015_y,by="a01") %>%
mutate(nonfoodexp_hhwk=nonfoodexp1_hhwk + nonfoodexp2_hhwk) %>%
dplyr::select(a01,nonfoodexp_hhwk)
#add food expenditures to household roster_2015
roster_2015_hh=left_join(roster_2015_hh,nonfoodexp_2015_hh,by=c("hhid"="a01")) %>%
mutate(nonfoodexp_hhwk_pc=nonfoodexp_hhwk/hhsize,
nonfoodexp_hhwk_AE_OECD=nonfoodexp_hhwk/AE_OECD)%>%
left_join(foodexp_2015_hh,by=c("hhid"="a01")) %>%
mutate(foodpurch_hhwk_pc = foodpurch_hhwk/hhsize,
foodpurch_hhwk_AE_OECD = foodpurch_hhwk/AE_OECD,
foodtot_hhwk_pc = foodtot_hhwk/hhsize,
foodtot_hhwk_AE_OECD = foodtot_hhwk/AE_OECD)%>%
mutate(foodshare=if_else(nonfoodexp_hhwk>0 & foodtot_hhwk>0,foodtot_hhwk/(foodtot_hhwk+nonfoodexp_hhwk),0),
totexp_hhwk=nonfoodexp_hhwk+foodtot_hhwk)
#dplyr::na_if(roster_2015_hh$foodshare,0) #convert zero to NA
rm(nonfoodexp_m_hh,nonfoodexp_y_hh,upazilla,villages,prices,foodexp_2015,foodexp_2015_hh,nonfoodexp_2015_hh,nonfoodexp_2015_m,nonfoodexp_2015_y,missing_exp)
foodsecurity=x3_female_2015%>%
dplyr::rename(hhid=a01,nofood_freq=x3_02,hungrynight_freq=x3_04,hungryday_freq=x3_06)%>%
mutate(nofood=if_else(x3_01==1,1,0),hungrynight=if_else(x3_03==1,1,0),hungryday=if_else(x3_05==1,1,0))%>%
mutate(cereal_days=x3_07_1+x3_07_2+x3_07_4,
tuber_days=x3_07_3,
vegetable_days=x3_07_5,
fruit_days=x3_07_6 ,
meat_days=x3_07_10+x3_07_11,
egg_days=x3_07_8,
seafood_days=x3_07_12 ,
pulse_days=x3_07_7+x3_07_16,
milk_days=x3_07_9,
fat_days=x3_07_13 ,
sugar_days=x3_07_14 ,
misc_days=x3_07_15+x3_07_17)%>%
mutate_at(.vars=vars(contains("days")),.funs=list(~as.numeric(.)))%>%
mutate_at(.vars=vars(contains("days")),.funs=list(~if_else(.>7,7,.)))%>%
mutate_at(.vars=vars(contains("days")),.funs=funs(`1`=if_else(.>0,1,0)))%>%
rename_at(.vars=vars(contains("days")),.funs=funs(sub("_days_1","",.)))%>%
dplyr::select(-contains("x"))%>%
mutate(hhds=rowSums(.[21:32],na.rm=TRUE))%>%
dplyr::select(hhid,hhds,contains("food"),contains("hungry"),-contains("freq"),-contains("seafood"))
# fx=function(x){
#   mutate(temp=if_else(x>0,1,0))
#   dplyr::rename(gsub("_days","",x)==temp)
# }
#add back to HH level roster
roster_2015_hh=left_join(roster_2015_hh,foodsecurity,by="hhid")
rm(foodsecurity)
#breakdown of assistance type (for all households)
# assistance = u_male_2015 %>%
#   filter(u01==1)
#
# assistance_count = aggregate(a01~slno, data=assistance, FUN = length)
# %>%
#   group_by(a01)%>%
#   summarise(u01_hh=n(mid_1)+n(mid_2))
### SUMMARY of all 6503 households (ie: 15 hh dropped with two spouses)
summary.hh.2015= roster_2015_hh %>%
psych::describe() %>%
as_tibble(rownames="rowname") %>%
dplyr::select(rowname,n,mean,sd)
#print(roster_2015_hh.summary,digits=3)
#setwd("C:/Users/lilac2/Box/BIHS_Project")
setwd("D:/UIUC/SP21/BIHSgit/BIHS_Project")
hh_type = aggregate(hhid~sampletype, data=roster_2015_hh, FUN = length)
#1:FTF Original 1000
#2:FTF Additional 1080
#3:National Representative 4423
#import weights
weights_2015 <- read_dta("./Data/Raw Data/bihs_2015/IFPRI_BIHS_R2_exp.dta") %>%
dplyr::select(a01,dvcode,vcode,aeu,hhweightR2,popweightR2)
#choose sample type 2 and 3, eliminate poly households
w.hh.roster.2015=left_join(roster_2015_hh,weights_2015,by=c("hhid"="a01"))%>%
filter(sampletype==2 |sampletype==3)
#%>%filter(poly==0&spouseabroad_hh==0)
#choose sample type 2 and 3, eliminate poly households & children under 1 & individuals w/out mealdata
w.I.roster.2015=left_join(roster_2015_I,weights_2015,by=c("hhid"="a01"))%>%
filter(sampletype==2 |sampletype==3)%>%
filter(I_kcal>0 & mealdata>0 &age>=2)%>%
dplyr::select(-poly,-mealdata)
#&poly==0&abroad==2&spouseabroad==0)
design_HH <- svydesign(data=w.hh.roster.2015,id=~vcode, strata=~dvcode,weights=~hhweightR2)
design_I <- svydesign(data=w.I.roster.2015,id=~vcode, strata=~dvcode,weights=~popweightR2)
# summary.w.hh.2015= w.hh.roster.2015 %>%
#   dplyr::select(hhsize,adult,child,totexp_hhwk,foodshare,hhds,contains("head"),contains("spouse"),vcode,dvcode,popweight1)%>%
#     psych::describe() %>%
#   as_tibble(rownames="rowname") %>%
#   dplyr::select(rowname,n,mean,sd)
listx = dplyr::select(w.hh.roster.2015,hhsize,adult,child,totexp_hhwk,foodshare,hhds,contains("head"),contains("spouse"),-contains("abroad"))%>%
mutate_at(.vars=vars(contains("sex")),.funs=list(~recode(.,"2=0")))%>%
mutate(maritalhead=if_else(maritalhead==2,1,0))
#-contains("sex"),-contains("marital"))
a=svymean(listx,design_HH,na.rm=TRUE)
#ab=print(ftable(a),rownames=c("Household Size","Number of Adults","Number of Children"),digits=2)
ab=as.data.table(a,keep.rownames=T)
ab$rownames<-c("Size","Number of Adults","Number of Children","Total Weekly Expenditure (2012 Taka)","Food Share of Total Expenditure","Household Dietary Diversity Score","Age (Years)","Male ","Married ","Literacy ","No Schooling ","Secondary Schooling ","Agricultural Worker ","Body Mass Index (BMI)","Reported Calorie Consumption (kcal)","Age (Years)","Male ","Literacy ","No Schooling ","Secondary Schooling ","Agricultural Worker ","Body Mass Index (BMI)","Reported Calorie Consumption (kcal)")
abc=ab%>%
dplyr::select(rownames,mean,SE)%>%
mutate(mean=if_else(mean<1,paste0(round(mean*100,2),"%"),as.character(round(mean,2))))
descriptives=kable(abc,booktabs=TRUE,digits=3,
col.names=c("Variable","Weighted Mean","SD"),escape=F)%>%
kable_styling(full_width=FALSE,bootstrap_options = "condensed")%>%
pack_rows("Household",1,6)%>%
pack_rows("Household Head",7,15)%>%
pack_rows("Spouse of Household Head",16,23)%>%
footnote(general="Data are population-weighted means and standard deviations using sample weights provided by IFPRI")
print(descriptives)
save_kable(descriptives,"./Programs/R/output/2015/outputBIHS_Projectdescriptives.png")
#a=qflextable(ab)
#write.table(ab,file="D:/UIUC/SP21/BIHSgit/BIHS_Project/Programs/R/output/descriptives.doc")
rm(listx,ab,a,abc)
# select health worker and group meeting data
# Question: Do we want to code visits from last THREE month? (y8_01a- y8_04a)
CHW_visit = y8_female_2015%>%
dplyr::select("a01","y8_01","y8_02","y8_03","y8_04",contains("y8_05"),"y8_06",contains("y8_07"))%>%
rename(hhid = a01, visit_sixmo = y8_01, health_org = y8_02, num_visited_sixmo = y8_03, any_advice = y8_04, advice1 = y8_05_1,advice2 = y8_05_2,advice3 = y8_05_3,advice4 = y8_05_4, any_grpdiscuss = y8_06, discuss_topics1 = y8_07_1,discuss_topics2 = y8_07_2,discuss_topics3 = y8_07_3,discuss_topics4 = y8_07_4)
#recode all yes/no variables, so that "no" is equal to zero, as it is coded as 2 in the codebook
#Question: is it okay for 88 it is coded to zero as well (88 = don't know)(did in 2011)
CHW_visit[is.na(CHW_visit$visit_sixmo), ]$visit_sixmo = 0
CHW_visit[CHW_visit$visit_sixmo == 2, ]$visit_sixmo = 0
CHW_visit[CHW_visit$visit_sixmo == 88, ]$visit_sixmo = 0
CHW_visit[is.na(CHW_visit$num_visited_sixmo), ]$num_visited_sixmo = 0
CHW_visit[CHW_visit$num_visited_sixmo == 88, ]$num_visited_sixmo = 0
#replace the NA values first with 0
CHW_visit[is.na(CHW_visit$any_advice), ]$any_advice = 0
CHW_visit[CHW_visit$any_advice == 2, ]$any_advice = 0
#count the number of household that has visits and has advice - there are a large difference
nrow(CHW_visit[CHW_visit$visit_sixmo == 1,])
nrow(CHW_visit[CHW_visit$any_advice == 1,])
# select i1 data, drop "sample type" column that is not necessary
# code NA to zero
Ag_production = i1_male_2015%>%
dplyr::rename(hhid=a01)%>%
group_by(hhid)%>%
dplyr::summarise(agsales=sum(i1_13,na.rm=TRUE))%>%
dplyr::select(hhid,agsales)
selected_i2 = i2_male_2015
#Goal: hh level variables for the maximum number of months of any grain stock
#first pivot longer so we each observation is a hhid-grain pair
#group by hh and summarise by creating a binary variable for each money if the hh had any grain stocks
#count the number of months for which that binary variable is greater than zero for each hh
grain_stock = i2_male_2015%>%
rename(hhid = a01)%>%
pivot_longer(cols = i2_02_1:i2_13_3,names_to = c("grain_month", "crop"),
names_pattern = "i2_?(.*)_(.*)", values_to="qty") %>%
#question: code 99999 (without stock) to zero
mutate(qty = if_else(qty<99999,qty,0))
grain_stock$grain_month = ifelse(str_detect(grain_stock$grain_month, fixed("02")),"Dec",
ifelse(str_detect(grain_stock$grain_month, fixed("03")),"Jan",
ifelse(str_detect(grain_stock$grain_month, fixed("04")),"Feb",
ifelse(str_detect(grain_stock$grain_month, fixed("05")),"Mar",
ifelse(str_detect(grain_stock$grain_month, fixed("06")),"Apr",
ifelse(str_detect(grain_stock$grain_month, fixed("07")),"May",
ifelse(str_detect(grain_stock$grain_month, fixed("08")),"Jun",
ifelse(str_detect(grain_stock$grain_month, fixed("09")),"Jul",
ifelse(str_detect(grain_stock$grain_month, fixed("10")),"Aug",
ifelse(str_detect(grain_stock$grain_month, fixed("11")),"Sep",
ifelse(str_detect(grain_stock$grain_month, fixed("12")),"Oct",
"Nov")))))))))))
grain_stock=grain_stock%>%
group_by(hhid,grain_month)%>%
dplyr::summarise(store_capacity_kg=mean(i2_14,na.rm=TRUE),tot_qty=sum(qty,na.rm=TRUE))%>%
ungroup()%>%
mutate(any_grain=if_else(tot_qty>0,1,0))%>%
group_by(hhid)%>%
dplyr::summarise(store_capacity_kg=mean(store_capacity_kg),nmo_anygrain=sum(any_grain))%>%
ungroup()
selected_i2a = i2a_male_2015
#select r01 and r06a columns and rename variables
#create binary variable =1 if HH had any HH-based latrine (r01=2,3,4,5)
# create binary varibale = 1 if drinking is filtered or treated (r06=1,2,3,4,6)
latrine_water = r_male_2015%>%
dplyr::select("a01", "r01", "r06a")%>%
rename(hhid = a01, latrine_type = r01, drinkwater_source = r06a)%>%
mutate(hh_lat = ifelse(latrine_type %in% c(2,3,4,5), 1,0),treated_drinkwater = ifelse(drinkwater_source %in% c(1,2,3,4,6), 1,0))%>%
dplyr::select(hhid,hh_lat,treated_drinkwater)
# select u data and rename variables
#question: what to do with u09 and u10? u09 is the Other in-kind sobsidy code, u10 is number
social_safety = u_male_2015%>%
filter(u01==1&hh_type%in%c(2,3))%>%
dplyr::rename(hhid = a01)%>%
group_by(hhid)%>%
rename(cash_received = u02)%>%
mutate(rice_val=if_else(is.finite(u03),u03*u04,as.numeric(NA)),wheat_val=if_else(is.finite(u05),u05*u06,as.numeric(NA)))%>%
dplyr::select(hhid,slno,hh_type,cash_received,rice_val,wheat_val,u07,u08)%>%
plyr::mutate(inkind_val=rowSums(.[5:8],na.rm=TRUE))%>%
group_by(hhid)%>%
dplyr::summarise(prog_ct=n(),cash_received=sum(cash_received,na.rm=TRUE),inkind_val=sum(inkind_val,na.rm=TRUE))
other_income = v4_male_2015%>%
mutate(tot_othinc=rowSums(.[3:14],na.rm=TRUE))%>%
rename(hhid = a01)%>%
dplyr::select(hhid,tot_othinc)
# filter all the household having any negative shocks
neg_shock = t1_male_2015%>%
rename(hhid = a01)%>%
group_by(hhid)%>%
dplyr::summarise(negshock_no=n(),negshock_val=sum(t1_07,na.rm=TRUE))
pos_shock = t2_male_2015%>%
filter(t2_03==1)%>%
rename(hhid = a01)%>%
group_by(hhid)%>%
dplyr::summarise(posshock_no=n(),posshock_val=sum(t2_06,na.rm=TRUE))
w.hh.roster.2015=w.hh.roster.2015%>%
left_join(CHW_visit,by=c("hhid"))%>%
left_join(Ag_production,by=c("hhid"))%>%
left_join(grain_stock,by=c("hhid"))%>%
left_join(latrine_water,by=c("hhid"))%>%
left_join(social_safety,by=c("hhid"))%>%
left_join(other_income,by=c("hhid"))%>%
left_join(neg_shock,by=c("hhid"))%>%
left_join(pos_shock,by=c("hhid"))
View(v4_male_2015)
