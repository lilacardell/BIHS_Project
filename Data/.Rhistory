sqrt(mean((q6_preds - wine_tst_y) ^ 2))
wine = as_tibble(ucidata::wine)
wine = wine %>%
mutate(quality_num = quality,
quality_cat = as.factor(quality)) %>%
select(-quality)
# split data
set.seed(2)
idx = sample(nrow(wine), size = 1000)
wine_trn = wine[idx, ]
wine_tst = wine[-idx, ]
# create x matrix (train and test) for use with cv.glmnet()
wine_trn_x = model.matrix(quality_num ~ . - quality_cat, data = wine_trn)[, -1]
wine_tst_x = model.matrix(quality_num ~ . - quality_cat, data = wine_tst)[, -1]
# create y vector (train and test) for use with cv.glmnet()
wine_trn_y = wine_trn$quality_num
wine_tst_y = wine_tst$quality_num
set.seed(42)
q6_mod = cv.glmnet(wine_trn_x, wine_trn_y, lambda = c(0.6,0.06,0.006))
q6_mod$nzero
coef(q6_mod)
str(q6_mod)
coef(q6_mod, s = 0.6)
coef(q6_mod, s = 0.06)
coef(q6_mod, s = 0.006)
q6_preds = predict(q6_mod, wine_tst_x, s = 0.006)
sqrt(mean((q6_preds - wine_tst_y) ^ 2))
wine = as_tibble(ucidata::wine)
wine = wine %>%
mutate(quality_num = quality,
quality_cat = as.factor(quality)) %>%
select(-quality)
# split data
set.seed(2)
idx = sample(nrow(wine), size = 1000)
wine_trn = wine[idx, ]
wine_tst = wine[-idx, ]
# create x matrix (train and test) for use with cv.glmnet()
wine_trn_x = model.matrix(quality_cat ~ . - quality_num, data = wine_trn)[, -1]
wine_tst_x = model.matrix(quality_cat ~ . - quality_num, data = wine_tst)[, -1]
wine_trn_y = wine_trn$quality_num
wine_tst_y = wine_tst$quality_num
head(wine_trn_y)
wine_trn_y
sum(wine_trn_y<5)
wine_trn_y = factor(ifelse(wine_trn_y > 5, "high", "low"))
wine_trn_y
sum(wine_trn_y == "low")
wine_trn_y = wine_trn$quality_num
sum(wine_trn_y <=5)
wine_trn_y = factor(ifelse(wine_trn_y > 5, "high", "low"))
wine_tst_y = factor(ifelse(wine_tst_y > 5, "high", "low"))
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",nfolds = 5)
set.seed(42)
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",nfolds = 5)
q4_mod$lambda.min
q4_mod$lambda.1se
q4_mod$nzero
q4_mod$nzero(s = "lambda.1se")
coef(q4_mod, s = "lambda.1se")
coef(q4_mod, s = "lambda.1se")[-1]
sum(coef(q4_mod, s = "lambda.1se")[-1]^2)
sum(coef(q4_mod, s = "lambda.min")[-1]^2)
predict(q4_mod, wine_tst_x, s = "lambda.min")
predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
levels(wine_trn_y)
q4_probs = predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
q4_preds = factor(ifelse(q4_probs>0.5,"low","high"))
q4_preds
mean(q4_preds == wine_tst_y)
set.seed(42)
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",alpha = 0, nfolds = 5)
q4_mod$lambda.min
q4_mod$lambda.1se
sum(coef(q4_mod, s = "lambda.1se")[-1]^2)
coef(q4_mod, s = "lambda.1se")
sum(coef(q4_mod, s = "lambda.min")[-1]^2)
q4_probs = predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
q4_preds = factor(ifelse(q4_probs>0.5,"low","high"))
q4_preds
mean(q4_preds == wine_tst_y)
set.seed(2)
idx = sample(nrow(wine), size = 1000)
wine_trn = wine[idx, ]
wine_tst = wine[-idx, ]
# create x matrix (train and test) for use with cv.glmnet()
wine_trn_x = model.matrix(quality_cat ~ . - quality_num, data = wine_trn)[, -1]
wine_tst_x = model.matrix(quality_cat ~ . - quality_num, data = wine_tst)[, -1]
wine_trn_y = wine_trn$quality_num
wine_tst_y = wine_tst$quality_num
wine_trn_y = factor(ifelse(wine_trn_y > 5, "high", "low"))
wine_tst_y = factor(ifelse(wine_tst_y > 5, "high", "low"))
set.seed(42)
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",alpha = 0, nfolds = 5)
q4_mod$lambda.min
q4_mod$lambda.1se
sum(coef(q4_mod, s = "lambda.1se")[-1]^2)
coef(q4_mod, s = "lambda.1se")
sum(coef(q4_mod, s = "lambda.min")[-1]^2)
q4_probs = predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
q4_preds = factor(ifelse(q4_probs>0.5,"low","high"))
#q4_preds
mean(q4_preds == wine_tst_y)
q4_mod$nzero
#q4_preds
mean(q4_preds == wine_tst_y)
wine_trn_x = model.matrix(quality_cat ~ . - quality_num, data = wine_trn)[, -1]
wine_tst_x = model.matrix(quality_cat ~ . - quality_num, data = wine_tst)[, -1]
wine_trn_y = wine_trn$quality_num
wine_tst_y = wine_tst$quality_num
wine_trn_y = factor(ifelse(wine_trn_y > 5, "high", "low"))
wine_tst_y = factor(ifelse(wine_tst_y > 5, "high", "low"))
set.seed(42)
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",alpha = 0, nfolds = 5)
q4_mod$nzero
q4_mod$lambda.min
q4_mod$lambda.1se
sum(coef(q4_mod, s = "lambda.1se")[-1]^2)
coef(q4_mod, s = "lambda.1se")
sum(coef(q4_mod, s = "lambda.min")[-1]^2)
q4_probs = predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
q4_preds = factor(ifelse(q4_probs>0.5,"low","high"))
#q4_preds
mean(q4_preds == wine_tst_y)
set.seed(2)
idx = sample(nrow(wine), size = 1000)
wine_trn = wine[idx, ]
wine_tst = wine[-idx, ]
# create x matrix (train and test) for use with cv.glmnet()
wine_trn_x = model.matrix(quality_cat ~ . - quality_num, data = wine_trn)[, -1]
wine_tst_x = model.matrix(quality_cat ~ . - quality_num, data = wine_tst)[, -1]
wine_trn_y = wine_trn$quality_num
wine_tst_y = wine_tst$quality_num
wine_trn_y = factor(ifelse(wine_trn_y > 6, "high", "low"))
wine_tst_y = factor(ifelse(wine_tst_y > 6, "high", "low"))
set.seed(42)
q4_mod = cv.glmnet(wine_trn_x,wine_trn_y,family = "binomial",alpha = 0, nfolds = 5)
q4_mod$nzero
q4_mod$lambda.min
q4_mod$lambda.1se
sum(coef(q4_mod, s = "lambda.1se")[-1]^2)
#coef(q4_mod, s = "lambda.1se")
sum(coef(q4_mod, s = "lambda.min")[-1]^2)
q4_probs = predict(q4_mod, wine_tst_x, s = "lambda.min",type = "response")
q4_preds = factor(ifelse(q4_probs>0.5,"low","high"))
#q4_preds
mean(q4_preds == wine_tst_y)
1-pgamma(4.5,shape = 3, rate = 1.25)
1:10
c(9,19)
?rep
rep(1,5)
c(rep(1,5),rep(2,5),rep(3,5))
happy_function = function(i) {}
?paste
paste("happy", 1)
happy_function = function(i) {
paste("happy", i)
}
x = 1:10
x.sapply(happy_function)
sapply(x,happy_function)
rep(sapply(x,happy_function),2)
y = c(6, 31, 8, 46, 18)
y[c(2, 4, 5)]
z = rep(0,17)
z
z[11] = 11
z
x = c(21, 20, 28, 10, 8)
y = c(6, 63, 8, 46, 2)
v = 4*y - x
v
v[v > 0]
pnorm(1.96)
pt(0.71,1)
pt(0.71,2)
pt(0.71,3)
tinytex::install_tinytex()
qf(0.975, 293)
qt(0.975, 293)
20142.3844 + 1.968093*362.7
20142.3844 - 1.968093*362.7
iris[iris$Petal.Width >= 0 & iris$Petal.Width <= 1.5, ]
set.seed(13)
x <- rnorm(50)
y <- rnorm(50)
plot(x,y,main="A Basic Scatter Plot")
set.seed(13)
x <- rnorm(50)
y <- rnorm(50)
plot(x,y,main="A Basic Scatter Plot")
?median
set.seed(13)
x <- rnorm(50)
y <- rnorm(50)
plot(x,y,main="A Basic Scatter Plot")
set.seed(14)
x <- rnorm(50)
y <- rnorm(50)
plot(x,y,main="A Basic Scatter Plot")
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
library(installr)
#knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
library(installr)
install.packages("installr")
#knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
#library(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
#knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
#library(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
install.packages("plm")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS_Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
#canlibrary(installr)
#updateR()
# ## get packages installed
# packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
#
# ## and now re-install install packages using install.packages()
# install.packages(packs$Package)
## Clear worksace
rm(list = ls())
gc()
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl','srvyr','gdata','labelled')
#,) ## you can add more packages here
lapply(packages, pkgTest)
setwd(https://github.com/lilacardell/BIHS_Project)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
#x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
#x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2015, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
#x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
#menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
#left_join(menucodes,by=c("menu"))%>%
#dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
#arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
#menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
#left_join(menucodes,by=c("menu"))%>%
#dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
#arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
rm(filenames,filepath,i,names,x1_1_f_2015)
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data/Clean Data/nutrient tables")
###Import nutrition data
FCT_Bangladesh =read_excel("./FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data/Clean Data/nutrient tables")
###Import nutrition data
FCT_Bangladesh =read_excel("./FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")%>%
dplyr::select(2,3,8,11:13,16,17)%>%
dplyr::rename(name=2,kcal=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_India=read_excel("./ifct2017_compositions.xlsx",sheet = "Data")%>%
dplyr::select(1,3,enerc,protcnt,fatce,choavldf,ca,fe)%>%
dplyr::rename(kj=3,protein=4,fat=5,carb=6,calcium=7,iron=8)%>%
filter(!is.na(BIHS_code))%>%
mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)%>%
mutate(kcal=kj/4.184)%>%
dplyr::select(BIHS_code,name,kcal,protein,fat,carb,calcium,iron)
#FCT_B=anti_join(FCT_Bangladesh,FCT_India,by=c("BIHS_code"))%>%
#  mutate_at(vars(1,3:8),as.numeric,na.omit=TRUE)
FCT_all=bind_rows(FCT_India,FCT_Bangladesh)%>%
arrange(BIHS_code)%>%
dplyr::select(-name)%>%
group_by(BIHS_code)%>%
dplyr::summarise_all(max)
nutrients = left_join(ingredientcodes,FCT_all,by=c("ingredient"="BIHS_code"))
rm(FCT_Bangladesh,FCT_India,FCT_all)
x1_f_2015_m = left_join(x1_female_2015,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=cwgt)%>%
dplyr::select(1,41,6,43,8,7,9,42,12,contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,12),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,12),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2015, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
# Read in data for project
setwd("/Users/juli/Desktop/BIHS/github/BIHS_Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2015/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2015/household/data/",i,".dta",sep=""))
assign(paste(substring(i,12),"_2015",sep=""),haven::read_dta(filepath)) #rename
}
#read in the 2011 census and 2015 consumption file for now
#census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=rbind(x1_1_female_2015, x1_2_female_2015), FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
