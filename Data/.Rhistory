sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
FAO_BMR <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "A1:H13",col_names = TRUE)%>%
dplyr::select(1,2,6,7,8)%>%
mutate(sex=if_else(sex=="Male",1,2))
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl') ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#read in D&T's version of adult equivalent
DST_AE <- read_excel("./Clean Data/DST_AE.xlsx",col_types = c("text", "numeric", "numeric"))%>%
separate(Age,c("age_min","age_max",sep=" - "))%>%
mutate(age_min=recode(age_min,c("Above"="70")),age_max=recode(age_max,c("70"="120")))%>%
dplyr::select(-3)%>%
dplyr::rename("male_AE"="Male","female_AE"="Female")%>%
#gather('Male','Female',key="sex",value="AE_DST")%>%
mutate(age_min=as.numeric(age_min),age_max=as.numeric(age_max))
#,sex=if_else(sex=="Male",1,2))
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
FAO_BMR <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "A1:H13",col_names = TRUE)%>%
dplyr::select(1,2,6,7,8)%>%
mutate(sex=if_else(Sex=="Male",1,2))
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl') ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#read in D&T's version of adult equivalent
DST_AE <- read_excel("./Clean Data/DST_AE.xlsx",col_types = c("text", "numeric", "numeric"))%>%
separate(Age,c("age_min","age_max",sep=" - "))%>%
mutate(age_min=recode(age_min,c("Above"="70")),age_max=recode(age_max,c("70"="120")))%>%
dplyr::select(-3)%>%
dplyr::rename("male_AE"="Male","female_AE"="Female")%>%
#gather('Male','Female',key="sex",value="AE_DST")%>%
mutate(age_min=as.numeric(age_min),age_max=as.numeric(age_max))
#,sex=if_else(sex=="Male",1,2))
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
FAO_BMR <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "A1:H13",col_names = TRUE)%>%
dplyr::select(1,2,6,7,8)%>%
mutate(sex=if_else(Sex=="Male",1,2))
FAO_PAL <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "L1:O4",col_names = TRUE)
rm(FCT_bangladesh,ingredientcodes,menu_items,filenames,filepath,i,names,x1_1_f_2015)
View(FAO_BMR)
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl') ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#read in D&T's version of adult equivalent
DST_AE <- read_excel("./Clean Data/DST_AE.xlsx",col_types = c("text", "numeric", "numeric"))%>%
separate(Age,c("age_min","age_max",sep=" - "))%>%
mutate(age_min=recode(age_min,c("Above"="70")),age_max=recode(age_max,c("70"="120")))%>%
dplyr::select(-3)%>%
dplyr::rename("male_AE"="Male","female_AE"="Female")%>%
#gather('Male','Female',key="sex",value="AE_DST")%>%
mutate(age_min=as.numeric(age_min),age_max=as.numeric(age_max))
#,sex=if_else(sex=="Male",1,2))
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
FAO_BMR <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "A1:H13",col_names = TRUE)%>%
dplyr::select(1,2,6,7,8)%>%
mutate(sex=if_else(Sex=="Male",1,2))%>%
dplyr::select(1,6,3:5)
FAO_PAL <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "L1:O4",col_names = TRUE)
rm(FCT_bangladesh,ingredientcodes,menu_items,filenames,filepath,i,names,x1_1_f_2015)
#join recipe dataset with menucodes to include menu names
x1_f_2011_m = left_join(x1_female_2011,menucodes,by=c("menu"))%>%
mutate(date=as_date(paste(x1_yy, x1_mm, x1_dd,sep="-")))%>%
dplyr::rename(rid=x1_rid,time=x1_03,menucode=menu,foodsource=x1_02,menucookwt=cwgt)%>%
dplyr::select(1,41,6,43,8,7,9,42,12,contains("x1_07"),contains("x1_08"))%>%
filter(!menucode %in% c(252,2521,2522))
#rename variables with ingredient codes and weights to help with reshaping dataset
names(x1_f_2011_m)<-gsub("x1_07","icode",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("x1_08","iweight",names(x1_f_2011_m))
names(x1_f_2011_m)<-gsub("_0","_",names(x1_f_2011_m))
#reshape the recipe dataset to join it with the nutrient dataset
#edit codes ingredients which have two BIHS codes, but are the same thing
nutnames=names(dplyr::select(nutrients,5,7:11))
recipes=melt(setDT(x1_f_2011_m),measure.vars=patterns("icode","iweight"),variable.name="inumber",value.name=c("icode","iweight"))%>%
arrange(a01,date,time,menucode)%>%
filter(is.finite(icode))%>%
mutate(icode=recode(icode,"233=232;90=80;193=181;187=186;32=258;47=46;267=162;188=189;211=179;25=157;204=179;238=189;229=228;126=123;111=88;2521=252;2522=252;41=249"))%>%
mutate(icode=as.numeric(icode))%>%
left_join(nutrients,by=c("icode"="ingredient"))
#calculate the specific per gram nutrient input of each ingredient: nutrient_c = (ingredient weight in grams x nutrientval per 100g)/100
for (x in nutnames){
recipes[[paste(x,"c",sep="_")]]<-recipes[[x]]*recipes$iweight/100
}
# #the below code worked for recoding over strings/variables, but I no longer needed it after I melted wide into long but wanted to save it for future
# namesx = names(dplyr::select(x1_f_2011_m,starts_with("x1_07_")))
#
# for(i in namesx){
# x1_f_2011_m[[i]] = recode(x1_f_2011_m[[i]],"233=232;90=80;193=181;187=186;32=258;47=46;267=162;188=189;211=179;25=157;204=179;238=189;229=228;126=123;111=88;2521=252;2522=252")
# }
#investigate ingredients that are missing nutrient info
missing = recipes[is.na(recipes$kcal),]
missing_ingredients = aggregate(a01~icode+ingredientname, data=missing, FUN = length) %>%
arrange(desc(a01))
#sum nutrients over meal
recipe_sum=recipes%>%
group_by(a01,sample_type,rid,date,time,foodsource,menucode,menuname,menucookwt)%>%
#filter(!is.na(kcal))%>%    #need to find these ingredients eventually
dplyr::summarise(sum_iweight=sum(iweight),sum_water=sum(water),sum_kcal=sum(kcal_c),sum_protein=sum(protein_c),sum_fat=sum(fat_c),sum_carb=sum(carb_c),sum_calcium=sum(calcium_c),sum_iron=sum(iron_c))
#find the median per gram nutrient info for each meal and the IQR
recipe_med=recipe_sum%>%
group_by(menucode,menuname)%>%
dplyr::summarise(med_kcal=median(sum_kcal/menucookwt,na.rm=TRUE),sd_kcal=sd(sum_kcal/menucookwt,na.rm=TRUE),
med_protein=median(sum_protein/menucookwt,na.rm=TRUE),sd_protein=sd(sum_protein/menucookwt,na.rm=TRUE),
med_fat=median(sum_fat/menucookwt,na.rm=TRUE),sd_fat=sd(sum_fat/menucookwt,na.rm=TRUE),
med_carb=median(sum_carb/menucookwt,na.rm=TRUE),sd_carb=sd(sum_carb/menucookwt,na.rm=TRUE),
med_calcium=median(sum_calcium/menucookwt,na.rm=TRUE),sd_calcium=sd(sum_calcium/menucookwt,na.rm=TRUE),
med_iron=median(sum_iron/menucookwt,na.rm=TRUE),sd_iron=sd(sum_iron/menucookwt,na.rm=TRUE))%>%
filter_all(all_vars(!is.na(.)))
for (x in nutnames){
recipe_med[[paste("min",x,sep="_")]]<-recipe_med[[paste("med",x,sep="_")]]-2*recipe_med[[paste("sd",x,sep="_")]]
recipe_med[[paste("max",x,sep="_")]]<-recipe_med[[paste("med",x,sep="_")]]+2*recipe_med[[paste("sd",x,sep="_")]]
}
#add the median per gram nutrient info back into the recipe set and replace missing items and items more/less than two sd from the mean
recipe_hh=left_join(recipe_sum,recipe_med,by=c("menucode","menuname"))
for (x in nutnames){
recipe_hh[[paste("sum",x,sep="_")]]=if_else(recipe_hh[[paste("sum",x,sep="_")]]==0|
is.na(recipe_hh[[paste("sum",x,sep="_")]])|
recipe_hh[[paste("sum",x,sep="_")]]>recipe_hh[[paste("max",x,sep="_")]]|
recipe_hh[[paste("sum",x,sep="_")]]<recipe_hh[[paste("min",x,sep="_")]],
recipe_hh[[paste("med",x,sep="_")]]*recipe_hh$menucookwt,
recipe_hh[[paste("sum",x,sep="_")]])
}
recipe_hh=recipe_hh%>%
dplyr::select(1:17)
rm(recipe_med,recipe_sum,recipes,menucodes,nutrients,missing,x1_female_2011,x1_f_2011_m,x)
#integrate with individual consumption data set and create individual calorie consumption
# #flag for individuals without consumption data
# datacheck = x2_f_2011  %>%
#   group_by(a01,x2_01) %>%
#   summarise(mealdata = n())%>%
#   filter(x2_01<100)%>%
#   dplyr::rename(mid=x2_01)
#join individual reported consumption with recipe nutrition information, and calculate individual nutrient consumption per meal item
recipe_I = left_join(x2_female_2011,recipe_hh,by=c("a01","x2_meal"="time","x2_08"="menucode"))%>%
dplyr::rename(meal_time=x2_meal,mid=x2_01,mealtaken=x2_03,sex_guest=x2_04,age_guest=x2_05,type_guest=x2_06,menucode=x2_08,icookwt=x2_09,ilocale=x2_11,iorder=x2_12,
sample=sample_type.x)%>%
mutate(i_mealcal=(icookwt/menucookwt)*sum_kcal,i_mealprotein=(icookwt/menucookwt)*sum_protein,i_mealfat=(icookwt/menucookwt)*sum_fat,
i_mealcarb=(icookwt/menucookwt)*sum_carb,i_mealcalcium=(icookwt/menucookwt)*sum_calcium,i_mealiron=(icookwt/menucookwt)*sum_iron)%>%
dplyr::select(-sample_type.y,-contains("sum_"))
nutrition_2011_I = recipe_I %>%
group_by(a01, mid) %>%
filter(mealtaken==1)%>% #filter out if meal not taken
dplyr::summarise(mealdata=n(),I_cal=sum(i_mealcal,na.rm=TRUE),I_protein=sum(i_mealprotein,na.rm=TRUE),I_fat=sum(i_mealfat,na.rm=TRUE),
I_carb=sum(i_mealcarb,na.rm=TRUE),I_calcium=sum(i_mealcalcium,na.rm=TRUE),I_iron=sum(i_mealiron,na.rm=TRUE))%>%
filter(mid<100) #filter out guests
nrow(filter(nutrition_2011_I,I_cal==0|is.na(I_cal))) #94 without calorie info
rm(recipe_I,recipe_hh)
#There are multiple data sets to corroborate:
# HH reports food purchase/produced/gifted within the last 7 days on o1_female
# HH reports food group consumption over last 7 days on x3_female
# HH reports consumption over prior 24 hours on x1_female
#sevenday_items_o1 = aggregate(a01~o1_01, data=o1_female_2011, FUN = length) #295 items
#sevenday_groups_x3 =
#oneday_items_x1 =
anthro_2011_I=w1_female_2011%>%
mutate(BMI=w1_03/((w1_04/100)^2))%>%
mutate(BMI=na_if(BMI,0))
View(anthro_2011_I)
roster_2011_I=left_join(b1_male_2011,anthro_2011_I,by=c("a01","mid","sample_type")) %>%
dplyr::rename(hhid=a01,pregnant=w1_01,lactating=w1_02,weight=w1_03,height=w1_04,sex=b1_01,age=b1_02,
relation=b1_03,marital=b1_04,abroad=b1_05,literacy=b1_07,
education=b1_08,occupation=b1_10,sampletype=sample_type) %>%
mutate(agegrp_DST=if_else(age>60,"60 and up",if_else(age>=40 & age<=60,"40-59",if_else(age>=20 & age<40,"20-39",as.character(NA)))),
agegrp_PONE=if_else(age>=45,"45 and up",if_else(age>=20 & age<=44,"20-44",if_else(age>=11 & age<=19,"11-19",
if_else(age>=6 & age<=10,"6-10",if_else(age>=0 & age<=5,"0-5",as.character(NA)))))))%>%
left_join(nutrition_2011_I,by=c("hhid"="a01","mid"))
nrow(filter(roster_2011_I,is.na(mealdata))) #1158 are missing mealdata
roster_2011_I$mealdata[is.na(roster_2011_I$mealdata)] <- 0
nrow(filter(roster_2011_I,is.na(BMI))) #4507 are missing BMI
occupation_type = aggregate(mid~occupation, data=roster_2011_I, FUN = length) %>%
dplyr::rename(n_I=mid)%>%
left_join(occupationcodes,by=c("occupation"="occupation_code")) %>%
mutate(activity=if_else(occupation %in% c(1:11,22,25,29:36,54,58:71),"heavy",
if_else(occupation %in% c(12:21,23:24,26:28,37:41,55:57),"moderate",
"light")))
# add back activity level, count number of household members, and flag polygamous HH
roster_2011_I = roster_2011_I %>%
left_join(occupation_type,by="occupation")%>%
dplyr::select(-n_I,-occupation_name)%>%
#filter(!relation %in% c(16)) %>%
group_by(hhid) %>%
mutate(hhsize=n(),
boy=if_else(age<17 & sex==1,1,0),
girl=if_else(age<17 & sex==2,1,0),
man=if_else(age>=18 & sex==1,1,0),
woman=if_else(age>=18 & sex==2,1,0),
adult=if_else(boy==0 & girl==0,1,0),
child=if_else(man==0 & woman==0,1,0),
otheradult=ifelse(relation>2 & adult==1,1,0),
porl=if_else(pregnant==1 | lactating==1,1,0),
spouseabroad=if_else(abroad==1 & relation==2,1,0))%>%
ungroup()%>%
group_by(hhid,relation)%>%
mutate(poly=if_else(n()>1 & relation==2,1,0)) %>%
ungroup()
View(roster_2011_I)
nrow(filter(roster_2011_I,poly==1)) #30 individuals are duplicate partners (ie: 15 hh have two spouses)
roster_2011_I=left_join(b1_male_2011,anthro_2011_I,by=c("a01","mid","sample_type")) %>%
dplyr::rename(hhid=a01,pregnant=w1_01,lactating=w1_02,weight=w1_03,height=w1_04,sex=b1_01,age=b1_02,
relation=b1_03,marital=b1_04,abroad=b1_05,literacy=b1_07,
education=b1_08,occupation=b1_10,sampletype=sample_type) %>%
mutate(agegrp_DST=if_else(age>60,"60 and up",if_else(age>=40 & age<=60,"40-59",if_else(age>=20 & age<40,"20-39",as.character(NA)))),
agegrp_PONE=if_else(age>=45,"45 and up",if_else(age>=20 & age<=44,"20-44",if_else(age>=11 & age<=19,"11-19",
if_else(age>=6 & age<=10,"6-10",if_else(age>=0 & age<=5,"0-5",as.character(NA)))))),
agegrp_FAO=if_else(age>=60,"60-150",if_else(age>=30 & age<60,"30-60",if_else(age>=18 & age<30,"18-30",if_else(age>=10 & age<18,"10-18",if_else(age>=3 & age<10,"3-10",if_else(age>=0 & age<3,"0-3",as.character(NA))))))))%>%
left_join(nutrition_2011_I,by=c("hhid"="a01","mid"))
nrow(filter(roster_2011_I,is.na(mealdata))) #1158 are missing mealdata
roster_2011_I$mealdata[is.na(roster_2011_I$mealdata)] <- 0
nrow(filter(roster_2011_I,is.na(BMI))) #4507 are missing BMI
occupation_type = aggregate(mid~occupation, data=roster_2011_I, FUN = length) %>%
dplyr::rename(n_I=mid)%>%
left_join(occupationcodes,by=c("occupation"="occupation_code")) %>%
mutate(activity=if_else(occupation %in% c(1:11,22,25,29:36,54,58:71),"heavy",
if_else(occupation %in% c(12:21,23:24,26:28,37:41,55:57),"moderate",
"light")))
# add back activity level, count number of household members, and flag polygamous HH
roster_2011_I = roster_2011_I %>%
left_join(occupation_type,by="occupation")%>%
dplyr::select(-n_I,-occupation_name)%>%
#filter(!relation %in% c(16)) %>%
group_by(hhid) %>%
mutate(hhsize=n(),
boy=if_else(age<17 & sex==1,1,0),
girl=if_else(age<17 & sex==2,1,0),
man=if_else(age>=18 & sex==1,1,0),
woman=if_else(age>=18 & sex==2,1,0),
adult=if_else(boy==0 & girl==0,1,0),
child=if_else(man==0 & woman==0,1,0),
otheradult=ifelse(relation>2 & adult==1,1,0),
porl=if_else(pregnant==1 | lactating==1,1,0),
spouseabroad=if_else(abroad==1 & relation==2,1,0))%>%
ungroup()%>%
group_by(hhid,relation)%>%
mutate(poly=if_else(n()>1 & relation==2,1,0)) %>%
ungroup()
nrow(filter(roster_2011_I,poly==1)) #30 individuals are duplicate partners (ie: 15 hh have two spouses)
knitr::opts_chunk$set(echo = FALSE,root.dir='C:/Users/lilac2/Box/BIHS Project',warning = FALSE, message=FALSE)
options(scipen=999)
set.seed(12345)
###  Check for and load Packages   ###
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','stargazer','plm','lubridate','survey','psych','knitr','xtable','tables','kableExtra','fuzzyjoin','MASS','matrixcalc','car','stringr','styler','readxl','magrittr','sjmisc','readxl') ## you can add more packages here
lapply(packages, pkgTest)
# Read in data for project
setwd("C:/Users/lilac2/Box/BIHS Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#read in D&T's version of adult equivalent
DST_AE <- read_excel("./Clean Data/DST_AE.xlsx",col_types = c("text", "numeric", "numeric"))%>%
separate(Age,c("age_min","age_max",sep=" - "))%>%
mutate(age_min=recode(age_min,c("Above"="70")),age_max=recode(age_max,c("70"="120")))%>%
dplyr::select(-3)%>%
dplyr::rename("male_AE"="Male","female_AE"="Female")%>%
#gather('Male','Female',key="sex",value="AE_DST")%>%
mutate(age_min=as.numeric(age_min),age_max=as.numeric(age_max))
#,sex=if_else(sex=="Male",1,2))
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
FAO_BMR <- read_excel("./Clean Data/FAO_energyrequirements_2011.xlsx",sheet="BMR_PAL",range = "A1:H13",col_names = TRUE)%>%
dplyr::select(1,2,6,7)%>%
mutate(sex=if_else(Sex=="Male",1,2))%>%
dplyr::select(1,6,3,4)
setwd("C:/Users/lilac2/Box/BIHS Project/Data")
#this pulls in all 2011 household level files except the WEAI
filenames<-grep(list.files(path="./Raw Data/bihs_2011_2012/household/data"),pattern=c("weai","h"),inv=TRUE,value=TRUE)
names<-gsub(".dta","",filenames)
for(i in names){
filepath <- file.path(paste("./Raw Data/bihs_2011_2012/household/data/",i,".dta",sep=""))
assign(paste(substring(i,9),"_2011",sep=""),haven::read_dta(filepath))
}
#read in the 2011 census and 2015 consumption file for now
census_2011 = read_dta("./Raw Data/bihs_2011_2012/census/data/001_census_ftf.dta")
x1_1_f_2015 = read_dta("./Raw Data/bihs_2015/household/data/064_r2_mod_x1_1_female.dta")
#read in D&T's version of adult equivalent
DST_AE <- read_excel("./Clean Data/DST_AE.xlsx",col_types = c("text", "numeric", "numeric"))%>%
separate(Age,c("age_min","age_max",sep=" - "))%>%
mutate(age_min=recode(age_min,c("Above"="70")),age_max=recode(age_max,c("70"="120")))%>%
dplyr::select(-3)%>%
dplyr::rename("male_AE"="Male","female_AE"="Female")%>%
#gather('Male','Female',key="sex",value="AE_DST")%>%
mutate(age_min=as.numeric(age_min),age_max=as.numeric(age_max))
#,sex=if_else(sex=="Male",1,2))
#import names of menu items from the 2015 codebook
#this is assumed to be more comprehensize than 2011 and also available in excel
menucodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C31:D415",col_names = c("menuname","menu"))
#count menu items
menu_items = aggregate(a01~menu, data=x1_female_2011, FUN = length)%>%
left_join(menucodes,by=c("menu"))%>%
dplyr::rename("menucode"="menu","hh_num" = "a01")%>%
arrange(desc(hh_num))
#206 items consumed in 2011
#issue with salt not being separated into iodine/non-iodine in 2011
#menu_items = aggregate(a01~x1_05, data=x1_1_f_2015, FUN = length) #180 items consumed in 2015
#1/3 salt is regular, 2/3 iodine (return to this later)
###import names of ingredient items from 2015 (assumed to be more comprehensize than 2011)
ingredientcodes = read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet = "064_r2_mod_x1_1_female", range = "C417:D717", col_names =c("ingredientname","ingredient"))%>%
add_row(ingredientname="Salt",ingredient=252)
occupationcodes=read_excel("./Raw Data/bihs_2015/household/documents/000_codebook.xls",
sheet ="003_r2_male_mod_b1", range = "C106:D182", col_names = c("occupation_name","occupation_code"))
###Import nutrition data
FCT_bangladesh =read_excel("./Clean Data/Nutrient Table/FCDB_7_4_14_LC.xlsx",sheet = "UserDB_Main_table")
#drop extra rows of nutrient data and select/rename/convert variables
nutrients = left_join(ingredientcodes,FCT_bangladesh,by=c("ingredient"="BIHS_code")) %>%
dplyr::rename(foodname_english=4,foodname_bengali=5,edible=8,kcal=9,water=11,protein=12,fat=13,carb=14,calcium=17,iron=18)%>%
dplyr::select(2,1,4,8:9,11:14,17,18)%>%
mutate_at(vars(4:11),as.numeric,na.omit=TRUE)
